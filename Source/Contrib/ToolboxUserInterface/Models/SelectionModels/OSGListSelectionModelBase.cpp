/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ListSelectionModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGListSelectionModelEventSource.h" // EventSource Class

#include "OSGListSelectionModelBase.h"
#include "OSGListSelectionModel.h"
#include "OSGListSelectionModelEventSource.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ListSelectionModel
    A UI SingleSelectionModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          ListSelectionModelBase::_sfSelectionMode
    
*/

/*! \var ListSelectionModelEventSource * ListSelectionModelBase::_sfEventSource
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ListSelectionModel *, nsOSG>::_type(
    "ListSelectionModelPtr", 
    "FieldContainerPtr", 
    ListSelectionModel::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ListSelectionModel *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ListSelectionModel *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ListSelectionModel *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ListSelectionModelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "SelectionMode",
        "",
        SelectionModeFieldId, SelectionModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ListSelectionModel::editHandleSelectionMode),
        static_cast<FieldGetMethodSig >(&ListSelectionModel::getHandleSelectionMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecListSelectionModelEventSourcePtr::Description(
        SFUnrecListSelectionModelEventSourcePtr::getClassType(),
        "EventSource",
        "",
        EventSourceFieldId, EventSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ListSelectionModel::editHandleEventSource),
        static_cast<FieldGetMethodSig >(&ListSelectionModel::getHandleEventSource));

    oType.addInitialDesc(pDesc);
}


ListSelectionModelBase::TypeObject ListSelectionModelBase::_type(
    ListSelectionModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    ListSelectionModel::initMethod,
    ListSelectionModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ListSelectionModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ListSelectionModel\"\n"
    "    parent=\"FieldContainer\"\n"
    "    library=\"ContribToolboxUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI SingleSelectionModel.\n"
    "    <Field\n"
    "        name=\"SelectionMode\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"ListSelectionModel::SINGLE_SELECTION\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"EventSource\"\n"
    "        type=\"ListSelectionModelEventSource\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\t\n"
    "    <ProducedEvent\n"
    "        name=\"SelectionChanged\"\n"
    "        detailsType=\"ListSelectionEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI SingleSelectionModel.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ListSelectionModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &ListSelectionModelBase::getType(void) const
{
    return _type;
}

UInt32 ListSelectionModelBase::getContainerSize(void) const
{
    return sizeof(ListSelectionModel);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *ListSelectionModelBase::editSFSelectionMode(void)
{
    editSField(SelectionModeFieldMask);

    return &_sfSelectionMode;
}

const SFUInt32 *ListSelectionModelBase::getSFSelectionMode(void) const
{
    return &_sfSelectionMode;
}


//! Get the ListSelectionModel::_sfEventSource field.
const SFUnrecListSelectionModelEventSourcePtr *ListSelectionModelBase::getSFEventSource(void) const
{
    return &_sfEventSource;
}

SFUnrecListSelectionModelEventSourcePtr *ListSelectionModelBase::editSFEventSource    (void)
{
    editSField(EventSourceFieldMask);

    return &_sfEventSource;
}






/*------------------------------ access -----------------------------------*/

SizeT ListSelectionModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        returnValue += _sfSelectionMode.getBinSize();
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        returnValue += _sfEventSource.getBinSize();
    }

    return returnValue;
}

void ListSelectionModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        _sfSelectionMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        _sfEventSource.copyToBin(pMem);
    }
}

void ListSelectionModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SelectionModeFieldMask & whichField))
    {
        editSField(SelectionModeFieldMask);
        _sfSelectionMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        editSField(EventSourceFieldMask);
        _sfEventSource.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ListSelectionModelBase::ListSelectionModelBase(void) :
    Inherited(),
    _sfSelectionMode          (UInt32(ListSelectionModel::SINGLE_SELECTION)),
    _sfEventSource            (NULL)
{
}

ListSelectionModelBase::ListSelectionModelBase(const ListSelectionModelBase &source) :
    Inherited(source),
    _sfSelectionMode          (source._sfSelectionMode          ),
    _sfEventSource            (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ListSelectionModelBase::~ListSelectionModelBase(void)
{
}

void ListSelectionModelBase::onCreate(const ListSelectionModel *source)
{
    Inherited::onCreate(source);

    if(source)
    {
        ListSelectionModel *pThis = static_cast<ListSelectionModel *>(this);

        pThis->setEventSource(source->getEventSource());
    }
    
    {
        ListSelectionModelEventSourceUnrecPtr evSrc = ListSelectionModelEventSource::create();
        setEventSource( evSrc );
    }
}

GetFieldHandlePtr ListSelectionModelBase::getHandleSelectionMode   (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSelectionMode,
             this->getType().getFieldDesc(SelectionModeFieldId),
             const_cast<ListSelectionModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListSelectionModelBase::editHandleSelectionMode  (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSelectionMode,
             this->getType().getFieldDesc(SelectionModeFieldId),
             this));


    editSField(SelectionModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ListSelectionModelBase::getHandleEventSource     (void) const
{
    SFUnrecListSelectionModelEventSourcePtr::GetHandlePtr returnValue(
        new  SFUnrecListSelectionModelEventSourcePtr::GetHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             const_cast<ListSelectionModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ListSelectionModelBase::editHandleEventSource    (void)
{
    SFUnrecListSelectionModelEventSourcePtr::EditHandlePtr returnValue(
        new  SFUnrecListSelectionModelEventSourcePtr::EditHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ListSelectionModel::setEventSource,
                    static_cast<ListSelectionModel *>(this), _1));

    editSField(EventSourceFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ListSelectionModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ListSelectionModel *pThis = static_cast<ListSelectionModel *>(this);

    pThis->execSync(static_cast<ListSelectionModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ListSelectionModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ListSelectionModel *>(this)->setEventSource(NULL);


}


boost::signals2::connection  ListSelectionModelBase::connectSelectionChanged(
                                                    const ListSelectionModelEventSource::SelectionChangedEventType::slot_type &listener, 
                                                    boost::signals2::connect_position at)
{
    return getEventSource()->connectSelectionChanged( listener, at );
}

boost::signals2::connection  ListSelectionModelBase::connectSelectionChanged(
                                                    const ListSelectionModelEventSource::SelectionChangedEventType::group_type &group,
                                                    const ListSelectionModelEventSource::SelectionChangedEventType::slot_type &listener, 
                                                    boost::signals2::connect_position at)
{
    return getEventSource()->connectSelectionChanged( group, listener, at );
}

void  ListSelectionModelBase::disconnectSelectionChanged(
                                                    const ListSelectionModelEventSource::SelectionChangedEventType::group_type &group
)
{
    getEventSource()->disconnectSelectionChanged( group );
}

void  ListSelectionModelBase::disconnectAllSlotsSelectionChanged(void)
{
    getEventSource()->disconnectAllSlotsSelectionChanged();
}

bool  ListSelectionModelBase::isEmptySelectionChanged(void) const
{
    return getEventSource()->isEmptySelectionChanged();
}

UInt32  ListSelectionModelBase::numSlotsSelectionChanged(void) const
{
    return getEventSource()->numSlotsSelectionChanged();
}

OSG_END_NAMESPACE
