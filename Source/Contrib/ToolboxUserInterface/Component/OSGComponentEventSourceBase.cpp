/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComponentEventSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"


#include "OSGComponentEventSourceBase.h"
#include "OSGComponentEventSource.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ComponentEventSource
    \brief An element of a graphical user interface.

    A Component represents a single element of a user interface. In other
    frameworks they may be called widgets or controls. All concrete GUI elements
    inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,
    OSG::InternalWindow, etc.

    \par Component states:
    Components have states for Enabled, Focused,
    MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive
    or produce any events. If a Component has Visible == false, it is not drawn. 

    \par Event response:
    Components can respond to Mouse, Key, and Focus events.

    \par Event production: Components produce Mouse, Key, Focus, Component, and
    ToolTip events if enabled.

    \par Drawing: Component handles setting up the clipping of a component, and
    the drawing of the Border, Background, and Foreground.  The Border,
    Background, and Foreground used when drawing a Component depends on it's
    state, and can also be overridden by inheriting classes. There are separate
    Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat
    states.

    \par Layout: The position and size of a Component is controlled by the
    OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer
    like OSG::Panel, the OSG::Layout attached to the container is used to control
    the position and size of components.  For more complex containers like
    OSG::SplitPanel, the position and size are controlled by the specific
    behavior of the container.
    \warning User code should never set the position or size of a Component
    directly, this is controlled by the OSG::ComponentContainer of the Component.

    \par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.
    Component has methods for taking, removing, or moving the focus.

    \par ToolTips: A component can have a ToolTip that will appear after a
    configurable amount of time passes with the mouse over the Component.

    \par PopupMenus: A OSG::PopupMenu can be attached to a Component that will
    be activated with a right-click mouse interaction.

    \par Scrolling: Components can be contained in a OSG::Viewport or a
    OSG::ScrollPanel for viewing large Components.

    \par Inheriting: Concrete GUI elements that inherit from Component must
    implement drawInternal().
 */



/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ComponentEventSource *, nsOSG>::_type(
    "ComponentEventSourcePtr",
    "EventContainerPtr",
    ComponentEventSource::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ComponentEventSource *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ComponentEventSource *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ComponentEventSource *,
                           nsOSG);

DataType &FieldTraits< ComponentEventSource *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<ComponentEventSource *, nsOSG>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      ComponentEventSource *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComponentEventSourceBase::classDescInserter(TypeObject &oType)
{
}


ComponentEventSourceBase::TypeObject ComponentEventSourceBase::_type(
    ComponentEventSourceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ComponentEventSourceBase::createEmptyLocal),
    ComponentEventSource::initMethod,
    ComponentEventSource::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ComponentEventSource::classDescInserter),
    false,
    0,
    "",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentEventSourceBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComponentEventSourceBase::getType(void) const
{
    return _type;
}

UInt32 ComponentEventSourceBase::getContainerSize(void) const
{
    return sizeof(ComponentEventSource);
}



/*------------------------------ access -----------------------------------*/

SizeT ComponentEventSourceBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    return returnValue;
}

void ComponentEventSourceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);
}

void ComponentEventSourceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);
}

//! create a new instance of the class
ComponentEventSourceTransitPtr ComponentEventSourceBase::createLocal(BitVector bFlags)
{
    ComponentEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ComponentEventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ComponentEventSourceTransitPtr ComponentEventSourceBase::createDependent(BitVector bFlags)
{
    ComponentEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ComponentEventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ComponentEventSourceTransitPtr ComponentEventSourceBase::create(void)
{
    ComponentEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ComponentEventSource>(tmpPtr);
    }

    return fc;
}

ComponentEventSource *ComponentEventSourceBase::createEmptyLocal(BitVector bFlags)
{
    ComponentEventSource *returnValue;

    newPtr<ComponentEventSource>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ComponentEventSource *ComponentEventSourceBase::createEmpty(void)
{
    ComponentEventSource *returnValue;

    newPtr<ComponentEventSource>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ComponentEventSourceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ComponentEventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComponentEventSource *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComponentEventSourceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ComponentEventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ComponentEventSource *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ComponentEventSourceBase::shallowCopy(void) const
{
    ComponentEventSource *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ComponentEventSource *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ComponentEventSourceBase::ComponentEventSourceBase(void) :
    Inherited()
{
}

ComponentEventSourceBase::ComponentEventSourceBase(const ComponentEventSourceBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

ComponentEventSourceBase::~ComponentEventSourceBase(void)
{
}


#ifdef OSG_MT_CPTR_ASPECT
void ComponentEventSourceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ComponentEventSource *pThis = static_cast<ComponentEventSource *>(this);

    pThis->execSync(static_cast<ComponentEventSource *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ComponentEventSourceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ComponentEventSource *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ComponentEventSource *>(pRefAspect),
                  dynamic_cast<const ComponentEventSource *>(this));

    return returnValue;
}
#endif

void ComponentEventSourceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

}

OSG_END_NAMESPACE
