/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIViewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGComponent.h"               // ViewComponent Class

#include "OSGUIViewportBase.h"
#include "OSGUIViewport.h"
#include "OSGUIViewportEventSource.h"
#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::UIViewport
    A UI UIViewport
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           UIViewportBase::_sfViewPosition
    
*/

/*! \var Component *     UIViewportBase::_sfViewComponent
    
*/

/*! \var Vec2f           UIViewportBase::_sfViewSize
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<UIViewport *, nsOSG>::_type(
    "UIViewportPtr", 
    "ComponentContainerPtr", 
    UIViewport::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(UIViewport *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           UIViewport *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           UIViewport *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void UIViewportBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "ViewPosition",
        "",
        ViewPositionFieldId, ViewPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIViewport::editHandleViewPosition),
        static_cast<FieldGetMethodSig >(&UIViewport::getHandleViewPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "ViewComponent",
        "",
        ViewComponentFieldId, ViewComponentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIViewport::editHandleViewComponent),
        static_cast<FieldGetMethodSig >(&UIViewport::getHandleViewComponent));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "ViewSize",
        "",
        ViewSizeFieldId, ViewSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIViewport::editHandleViewSize),
        static_cast<FieldGetMethodSig >(&UIViewport::getHandleViewSize));

    oType.addInitialDesc(pDesc);
}


UIViewportBase::TypeObject UIViewportBase::_type(
    UIViewportBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&UIViewportBase::createEmptyLocal),
    UIViewport::initMethod,
    UIViewport::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&UIViewport::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"UIViewport\"\n"
    "    parent=\"ComponentContainer\"\n"
    "    library=\"ContribToolboxUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    parentProducer=\"Component\"\n"
    ">\n"
    "A UI UIViewport\n"
    "    <Field\n"
    "        name=\"ViewPosition\"\n"
    "        type=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0.0f,0.0f\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ViewComponent\"\n"
    "        type=\"Component\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ViewSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"-1.0f,-1.0f\"\n"
    "    >\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"StateChanged\"\n"
    "        detailsType=\"ChangeEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI UIViewport\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &UIViewportBase::getType(void)
{
    return _type;
}

const FieldContainerType &UIViewportBase::getType(void) const
{
    return _type;
}

UInt32 UIViewportBase::getContainerSize(void) const
{
    return sizeof(UIViewport);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *UIViewportBase::editSFViewPosition(void)
{
    editSField(ViewPositionFieldMask);

    return &_sfViewPosition;
}

const SFPnt2f *UIViewportBase::getSFViewPosition(void) const
{
    return &_sfViewPosition;
}


//! Get the UIViewport::_sfViewComponent field.
const SFUnrecComponentPtr *UIViewportBase::getSFViewComponent(void) const
{
    return &_sfViewComponent;
}

SFUnrecComponentPtr *UIViewportBase::editSFViewComponent  (void)
{
    editSField(ViewComponentFieldMask);

    return &_sfViewComponent;
}

//! Get the value of the UIViewport::_sfViewComponent field.
Component * UIViewportBase::getViewComponent(void) const
{
    return _sfViewComponent.getValue();
}

//! Set the value of the UIViewport::_sfViewComponent field.
void UIViewportBase::setViewComponent(Component * const value)
{
    editSField(ViewComponentFieldMask);

    _sfViewComponent.setValue(value);
}


SFVec2f *UIViewportBase::editSFViewSize(void)
{
    editSField(ViewSizeFieldMask);

    return &_sfViewSize;
}

const SFVec2f *UIViewportBase::getSFViewSize(void) const
{
    return &_sfViewSize;
}






/*------------------------------ access -----------------------------------*/

SizeT UIViewportBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewPositionFieldMask & whichField))
    {
        returnValue += _sfViewPosition.getBinSize();
    }
    if(FieldBits::NoField != (ViewComponentFieldMask & whichField))
    {
        returnValue += _sfViewComponent.getBinSize();
    }
    if(FieldBits::NoField != (ViewSizeFieldMask & whichField))
    {
        returnValue += _sfViewSize.getBinSize();
    }

    return returnValue;
}

void UIViewportBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewPositionFieldMask & whichField))
    {
        _sfViewPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewComponentFieldMask & whichField))
    {
        _sfViewComponent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewSizeFieldMask & whichField))
    {
        _sfViewSize.copyToBin(pMem);
    }
}

void UIViewportBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewPositionFieldMask & whichField))
    {
        editSField(ViewPositionFieldMask);
        _sfViewPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewComponentFieldMask & whichField))
    {
        editSField(ViewComponentFieldMask);
        _sfViewComponent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewSizeFieldMask & whichField))
    {
        editSField(ViewSizeFieldMask);
        _sfViewSize.copyFromBin(pMem);
    }
}

//! create a new instance of the class
UIViewportTransitPtr UIViewportBase::createLocal(BitVector bFlags)
{
    UIViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<UIViewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
UIViewportTransitPtr UIViewportBase::createDependent(BitVector bFlags)
{
    UIViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<UIViewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
UIViewportTransitPtr UIViewportBase::create(void)
{
    UIViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<UIViewport>(tmpPtr);
    }

    return fc;
}

UIViewport *UIViewportBase::createEmptyLocal(BitVector bFlags)
{
    UIViewport *returnValue;

    newPtr<UIViewport>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
UIViewport *UIViewportBase::createEmpty(void)
{
    UIViewport *returnValue;

    newPtr<UIViewport>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr UIViewportBase::shallowCopyLocal(
    BitVector bFlags) const
{
    UIViewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const UIViewport *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr UIViewportBase::shallowCopyDependent(
    BitVector bFlags) const
{
    UIViewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const UIViewport *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr UIViewportBase::shallowCopy(void) const
{
    UIViewport *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const UIViewport *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

UIViewportBase::UIViewportBase(void) :
    Inherited(),
    _sfViewPosition           (Pnt2f(0.0f,0.0f)),
    _sfViewComponent          (NULL),
    _sfViewSize               (Vec2f(-1.0f,-1.0f))
{
}

UIViewportBase::UIViewportBase(const UIViewportBase &source) :
    Inherited(source),
    _sfViewPosition           (source._sfViewPosition           ),
    _sfViewComponent          (NULL),
    _sfViewSize               (source._sfViewSize               )
{
}


/*-------------------------- destructors ----------------------------------*/

UIViewportBase::~UIViewportBase(void)
{
}

void UIViewportBase::onCreate(const UIViewport *source)
{
    Inherited::onCreate(source);

    if(source)
    {
        UIViewport *pThis = static_cast<UIViewport *>(this);

        pThis->setViewComponent(source->getViewComponent());
    }
    else
    {
        UIViewportEventSourceUnrecPtr evSrc = UIViewportEventSource::create();
        setEventSource( evSrc );
    }
}

GetFieldHandlePtr UIViewportBase::getHandleViewPosition    (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfViewPosition,
             this->getType().getFieldDesc(ViewPositionFieldId),
             const_cast<UIViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIViewportBase::editHandleViewPosition   (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfViewPosition,
             this->getType().getFieldDesc(ViewPositionFieldId),
             this));


    editSField(ViewPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIViewportBase::getHandleViewComponent   (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfViewComponent,
             this->getType().getFieldDesc(ViewComponentFieldId),
             const_cast<UIViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIViewportBase::editHandleViewComponent  (void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfViewComponent,
             this->getType().getFieldDesc(ViewComponentFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&UIViewport::setViewComponent,
                    static_cast<UIViewport *>(this), _1));

    editSField(ViewComponentFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIViewportBase::getHandleViewSize        (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfViewSize,
             this->getType().getFieldDesc(ViewSizeFieldId),
             const_cast<UIViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIViewportBase::editHandleViewSize       (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfViewSize,
             this->getType().getFieldDesc(ViewSizeFieldId),
             this));


    editSField(ViewSizeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void UIViewportBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    UIViewport *pThis = static_cast<UIViewport *>(this);

    pThis->execSync(static_cast<UIViewport *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *UIViewportBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    UIViewport *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const UIViewport *>(pRefAspect),
                  dynamic_cast<const UIViewport *>(this));

    return returnValue;
}
#endif

void UIViewportBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<UIViewport *>(this)->setViewComponent(NULL);


}


OSG_END_NAMESPACE
