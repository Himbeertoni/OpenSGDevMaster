/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TableColumn!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &TableColumnBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TableColumnBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TableColumnBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

//Test
/*------------------------------ get -----------------------------------*/

    //Field MaxWidth
//! Get the value of the TableColumn::_sfMaxWidth field.

inline
UInt32 &TableColumnBase::editMaxWidth(void)
{
    editSField(MaxWidthFieldMask);

    return _sfMaxWidth.getValue();
}

//! Get the value of the TableColumn::_sfMaxWidth field.
inline
      UInt32  TableColumnBase::getMaxWidth(void) const
{
    return _sfMaxWidth.getValue();
}

//! Set the value of the TableColumn::_sfMaxWidth field.
inline
void TableColumnBase::setMaxWidth(const UInt32 value)
{
    editSField(MaxWidthFieldMask);

    _sfMaxWidth.setValue(value);
}
    //Field MinWidth
//! Get the value of the TableColumn::_sfMinWidth field.

inline
UInt32 &TableColumnBase::editMinWidth(void)
{
    editSField(MinWidthFieldMask);

    return _sfMinWidth.getValue();
}

//! Get the value of the TableColumn::_sfMinWidth field.
inline
      UInt32  TableColumnBase::getMinWidth(void) const
{
    return _sfMinWidth.getValue();
}

//! Set the value of the TableColumn::_sfMinWidth field.
inline
void TableColumnBase::setMinWidth(const UInt32 value)
{
    editSField(MinWidthFieldMask);

    _sfMinWidth.setValue(value);
}
    //Field ModelIndex
//! Get the value of the TableColumn::_sfModelIndex field.

inline
UInt32 &TableColumnBase::editModelIndex(void)
{
    editSField(ModelIndexFieldMask);

    return _sfModelIndex.getValue();
}

//! Get the value of the TableColumn::_sfModelIndex field.
inline
      UInt32  TableColumnBase::getModelIndex(void) const
{
    return _sfModelIndex.getValue();
}

//! Set the value of the TableColumn::_sfModelIndex field.
inline
void TableColumnBase::setModelIndex(const UInt32 value)
{
    editSField(ModelIndexFieldMask);

    _sfModelIndex.setValue(value);
}
    //Field PreferredWidth
//! Get the value of the TableColumn::_sfPreferredWidth field.

inline
UInt32 &TableColumnBase::editPreferredWidth(void)
{
    editSField(PreferredWidthFieldMask);

    return _sfPreferredWidth.getValue();
}

//! Get the value of the TableColumn::_sfPreferredWidth field.
inline
      UInt32  TableColumnBase::getPreferredWidth(void) const
{
    return _sfPreferredWidth.getValue();
}

//! Set the value of the TableColumn::_sfPreferredWidth field.
inline
void TableColumnBase::setPreferredWidth(const UInt32 value)
{
    editSField(PreferredWidthFieldMask);

    _sfPreferredWidth.setValue(value);
}
    //Field Width
//! Get the value of the TableColumn::_sfWidth field.

inline
UInt32 &TableColumnBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the TableColumn::_sfWidth field.
inline
      UInt32  TableColumnBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the TableColumn::_sfWidth field.
inline
void TableColumnBase::setWidth(const UInt32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
    //Field Resizable
//! Get the value of the TableColumn::_sfResizable field.

inline
bool &TableColumnBase::editResizable(void)
{
    editSField(ResizableFieldMask);

    return _sfResizable.getValue();
}

//! Get the value of the TableColumn::_sfResizable field.
inline
      bool  TableColumnBase::getResizable(void) const
{
    return _sfResizable.getValue();
}

//! Set the value of the TableColumn::_sfResizable field.
inline
void TableColumnBase::setResizable(const bool value)
{
    editSField(ResizableFieldMask);

    _sfResizable.setValue(value);
}
    //Field CellEditor
//! Get the value of the TableColumn::_sfCellEditor field.
inline
TableCellEditor * TableColumnBase::getCellEditor(void) const
{
    return _sfCellEditor.getValue();
}

//! Set the value of the TableColumn::_sfCellEditor field.
inline
void TableColumnBase::setCellEditor(TableCellEditor * const value)
{
    editSField(CellEditorFieldMask);

    _sfCellEditor.setValue(value);
}
    //Field EventSource
//! Get the value of the TableColumn::_sfEventSource field.
inline
TableColumnEventSource * TableColumnBase::getEventSource(void) const
{
    return _sfEventSource.getValue();
}

//! Set the value of the TableColumn::_sfEventSource field.
inline
void TableColumnBase::setEventSource(TableColumnEventSource * const value)
{
    editSField(EventSourceFieldMask);

    _sfEventSource.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TableColumnBase::execSync (      TableColumnBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (MaxWidthFieldMask & whichField))
        _sfMaxWidth.syncWith(pFrom->_sfMaxWidth);

    if(FieldBits::NoField != (MinWidthFieldMask & whichField))
        _sfMinWidth.syncWith(pFrom->_sfMinWidth);

    if(FieldBits::NoField != (ModelIndexFieldMask & whichField))
        _sfModelIndex.syncWith(pFrom->_sfModelIndex);

    if(FieldBits::NoField != (PreferredWidthFieldMask & whichField))
        _sfPreferredWidth.syncWith(pFrom->_sfPreferredWidth);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (ResizableFieldMask & whichField))
        _sfResizable.syncWith(pFrom->_sfResizable);

    if(FieldBits::NoField != (CellEditorFieldMask & whichField))
        _sfCellEditor.syncWith(pFrom->_sfCellEditor);

    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
        _sfEventSource.syncWith(pFrom->_sfEventSource);
}
#endif


inline
const Char8 *TableColumnBase::getClassname(void)
{
    return "TableColumn";
}
OSG_GEN_CONTAINERPTR(TableColumn);

OSG_END_NAMESPACE

