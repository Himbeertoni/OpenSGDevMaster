/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MenuButton!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGListModel.h"               // Model Class
#include "OSGComponentGenerator.h"      // CellGenerator Class
#include "OSGListGeneratedPopupMenu.h"  // MenuButtonPopupMenu Class

#include "OSGMenuButtonBase.h"
#include "OSGMenuButton.h"
#include "OSGMenuButtonEventSource.h"
#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MenuButton
    A UI MenuButton
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ListModel *     MenuButtonBase::_sfModel
    
*/

/*! \var ComponentGenerator * MenuButtonBase::_sfCellGenerator
    
*/

/*! \var ListGeneratedPopupMenu * MenuButtonBase::_sfMenuButtonPopupMenu
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MenuButton *, nsOSG>::_type(
    "MenuButtonPtr", 
    "ToggleButtonPtr", 
    MenuButton::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MenuButton *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MenuButton *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MenuButton *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MenuButtonBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecListModelPtr::Description(
        SFUnrecListModelPtr::getClassType(),
        "Model",
        "",
        ModelFieldId, ModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MenuButton::editHandleModel),
        static_cast<FieldGetMethodSig >(&MenuButton::getHandleModel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentGeneratorPtr::Description(
        SFUnrecComponentGeneratorPtr::getClassType(),
        "CellGenerator",
        "",
        CellGeneratorFieldId, CellGeneratorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MenuButton::editHandleCellGenerator),
        static_cast<FieldGetMethodSig >(&MenuButton::getHandleCellGenerator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecListGeneratedPopupMenuPtr::Description(
        SFUnrecListGeneratedPopupMenuPtr::getClassType(),
        "MenuButtonPopupMenu",
        "",
        MenuButtonPopupMenuFieldId, MenuButtonPopupMenuFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MenuButton::editHandleMenuButtonPopupMenu),
        static_cast<FieldGetMethodSig >(&MenuButton::getHandleMenuButtonPopupMenu));

    oType.addInitialDesc(pDesc);
}


MenuButtonBase::TypeObject MenuButtonBase::_type(
    MenuButtonBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&MenuButtonBase::createEmptyLocal),
    MenuButton::initMethod,
    MenuButton::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MenuButton::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"MenuButton\"\n"
    "    parent=\"ToggleButton\"\n"
    "    library=\"ContribToolboxUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    parentProducer=\"ToggleButton\"\n"
    ">\n"
    "A UI MenuButton\n"
    "    <Field\n"
    "        name=\"Model\"\n"
    "        type=\"ListModel\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "   </Field>\n"
    "    <Field\n"
    "        name=\"CellGenerator\"\n"
    "        type=\"ComponentGenerator\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "   </Field>\n"
    "    <Field\n"
    "        name=\"MenuButtonPopupMenu\"\n"
    "        type=\"ListGeneratedPopupMenu\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "    >\n"
    "    </Field>\n"
    "    <ProducedEvent\n"
    "        name=\"MenuActionPerformed\"\n"
    "        detailsType=\"ActionEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    </ProducedEvent>\n"
    "</FieldContainer>\n",
    "A UI MenuButton\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MenuButtonBase::getType(void)
{
    return _type;
}

const FieldContainerType &MenuButtonBase::getType(void) const
{
    return _type;
}

UInt32 MenuButtonBase::getContainerSize(void) const
{
    return sizeof(MenuButton);
}

/*------------------------- decorator get ------------------------------*/


//! Get the MenuButton::_sfModel field.
const SFUnrecListModelPtr *MenuButtonBase::getSFModel(void) const
{
    return &_sfModel;
}

SFUnrecListModelPtr *MenuButtonBase::editSFModel          (void)
{
    editSField(ModelFieldMask);

    return &_sfModel;
}

//! Get the value of the MenuButton::_sfModel field.
ListModel * MenuButtonBase::getModel(void) const
{
    return _sfModel.getValue();
}

//! Set the value of the MenuButton::_sfModel field.
void MenuButtonBase::setModel(ListModel * const value)
{
    editSField(ModelFieldMask);

    _sfModel.setValue(value);
}


//! Get the MenuButton::_sfCellGenerator field.
const SFUnrecComponentGeneratorPtr *MenuButtonBase::getSFCellGenerator(void) const
{
    return &_sfCellGenerator;
}

SFUnrecComponentGeneratorPtr *MenuButtonBase::editSFCellGenerator  (void)
{
    editSField(CellGeneratorFieldMask);

    return &_sfCellGenerator;
}

//! Get the value of the MenuButton::_sfCellGenerator field.
ComponentGenerator * MenuButtonBase::getCellGenerator(void) const
{
    return _sfCellGenerator.getValue();
}

//! Set the value of the MenuButton::_sfCellGenerator field.
void MenuButtonBase::setCellGenerator(ComponentGenerator * const value)
{
    editSField(CellGeneratorFieldMask);

    _sfCellGenerator.setValue(value);
}


//! Get the MenuButton::_sfMenuButtonPopupMenu field.
const SFUnrecListGeneratedPopupMenuPtr *MenuButtonBase::getSFMenuButtonPopupMenu(void) const
{
    return &_sfMenuButtonPopupMenu;
}

SFUnrecListGeneratedPopupMenuPtr *MenuButtonBase::editSFMenuButtonPopupMenu(void)
{
    editSField(MenuButtonPopupMenuFieldMask);

    return &_sfMenuButtonPopupMenu;
}

//! Get the value of the MenuButton::_sfMenuButtonPopupMenu field.
ListGeneratedPopupMenu * MenuButtonBase::getMenuButtonPopupMenu(void) const
{
    return _sfMenuButtonPopupMenu.getValue();
}

//! Set the value of the MenuButton::_sfMenuButtonPopupMenu field.
void MenuButtonBase::setMenuButtonPopupMenu(ListGeneratedPopupMenu * const value)
{
    editSField(MenuButtonPopupMenuFieldMask);

    _sfMenuButtonPopupMenu.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT MenuButtonBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        returnValue += _sfModel.getBinSize();
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        returnValue += _sfCellGenerator.getBinSize();
    }
    if(FieldBits::NoField != (MenuButtonPopupMenuFieldMask & whichField))
    {
        returnValue += _sfMenuButtonPopupMenu.getBinSize();
    }

    return returnValue;
}

void MenuButtonBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        _sfModel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        _sfCellGenerator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MenuButtonPopupMenuFieldMask & whichField))
    {
        _sfMenuButtonPopupMenu.copyToBin(pMem);
    }
}

void MenuButtonBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ModelFieldMask & whichField))
    {
        editSField(ModelFieldMask);
        _sfModel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CellGeneratorFieldMask & whichField))
    {
        editSField(CellGeneratorFieldMask);
        _sfCellGenerator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MenuButtonPopupMenuFieldMask & whichField))
    {
        editSField(MenuButtonPopupMenuFieldMask);
        _sfMenuButtonPopupMenu.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MenuButtonTransitPtr MenuButtonBase::createLocal(BitVector bFlags)
{
    MenuButtonTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MenuButton>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MenuButtonTransitPtr MenuButtonBase::createDependent(BitVector bFlags)
{
    MenuButtonTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MenuButton>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MenuButtonTransitPtr MenuButtonBase::create(void)
{
    MenuButtonTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MenuButton>(tmpPtr);
    }

    return fc;
}

MenuButton *MenuButtonBase::createEmptyLocal(BitVector bFlags)
{
    MenuButton *returnValue;

    newPtr<MenuButton>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MenuButton *MenuButtonBase::createEmpty(void)
{
    MenuButton *returnValue;

    newPtr<MenuButton>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MenuButtonBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MenuButton *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MenuButton *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuButtonBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MenuButton *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MenuButton *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MenuButtonBase::shallowCopy(void) const
{
    MenuButton *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MenuButton *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MenuButtonBase::MenuButtonBase(void) :
    Inherited(),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfMenuButtonPopupMenu    (NULL)
{
}

MenuButtonBase::MenuButtonBase(const MenuButtonBase &source) :
    Inherited(source),
    _sfModel                  (NULL),
    _sfCellGenerator          (NULL),
    _sfMenuButtonPopupMenu    (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MenuButtonBase::~MenuButtonBase(void)
{
}

void MenuButtonBase::onCreate(const MenuButton *source)
{
    Inherited::onCreate(source);

    if(source)
    {
        MenuButton *pThis = static_cast<MenuButton *>(this);

        pThis->setModel(source->getModel());

        pThis->setCellGenerator(source->getCellGenerator());

        pThis->setMenuButtonPopupMenu(source->getMenuButtonPopupMenu());
    }
    else
    {
        MenuButtonEventSourceUnrecPtr evSrc = MenuButtonEventSource::create();
        setEventSource( evSrc );
    }
}

GetFieldHandlePtr MenuButtonBase::getHandleModel           (void) const
{
    SFUnrecListModelPtr::GetHandlePtr returnValue(
        new  SFUnrecListModelPtr::GetHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             const_cast<MenuButtonBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuButtonBase::editHandleModel          (void)
{
    SFUnrecListModelPtr::EditHandlePtr returnValue(
        new  SFUnrecListModelPtr::EditHandle(
             &_sfModel,
             this->getType().getFieldDesc(ModelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MenuButton::setModel,
                    static_cast<MenuButton *>(this), _1));

    editSField(ModelFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuButtonBase::getHandleCellGenerator   (void) const
{
    SFUnrecComponentGeneratorPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::GetHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             const_cast<MenuButtonBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuButtonBase::editHandleCellGenerator  (void)
{
    SFUnrecComponentGeneratorPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentGeneratorPtr::EditHandle(
             &_sfCellGenerator,
             this->getType().getFieldDesc(CellGeneratorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MenuButton::setCellGenerator,
                    static_cast<MenuButton *>(this), _1));

    editSField(CellGeneratorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MenuButtonBase::getHandleMenuButtonPopupMenu (void) const
{
    SFUnrecListGeneratedPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecListGeneratedPopupMenuPtr::GetHandle(
             &_sfMenuButtonPopupMenu,
             this->getType().getFieldDesc(MenuButtonPopupMenuFieldId),
             const_cast<MenuButtonBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MenuButtonBase::editHandleMenuButtonPopupMenu(void)
{
    SFUnrecListGeneratedPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecListGeneratedPopupMenuPtr::EditHandle(
             &_sfMenuButtonPopupMenu,
             this->getType().getFieldDesc(MenuButtonPopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MenuButton::setMenuButtonPopupMenu,
                    static_cast<MenuButton *>(this), _1));

    editSField(MenuButtonPopupMenuFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MenuButtonBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MenuButton *pThis = static_cast<MenuButton *>(this);

    pThis->execSync(static_cast<MenuButton *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MenuButtonBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MenuButton *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MenuButton *>(pRefAspect),
                  dynamic_cast<const MenuButton *>(this));

    return returnValue;
}
#endif

void MenuButtonBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MenuButton *>(this)->setModel(NULL);

    static_cast<MenuButton *>(this)->setCellGenerator(NULL);

    static_cast<MenuButton *>(this)->setMenuButtonPopupMenu(NULL);


}


OSG_END_NAMESPACE
