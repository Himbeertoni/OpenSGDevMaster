/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Component!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"


#include "OSGWindowEventProducer.h"       // Cursor default header

#include "OSGLayoutConstraints.h"       // Constraints Class
#include "OSGBorder.h"                  // Border Class
#include "OSGLayer.h"                   // Background Class
#include "OSGComponent.h"               // ToolTip Class
#include "OSGFieldContainer.h"          // ParentContainer Class
#include "OSGPopupMenu.h"               // PopupMenu Class
#include "OSGComponentEventSource.h"    // EventSource Class

#include "OSGComponentBase.h"
#include "OSGComponent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Component
    \brief An element of a graphical user interface.

    A Component represents a single element of a user interface. In other
    frameworks they may be called widgets or controls. All concrete GUI elements
    inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,
    OSG::InternalWindow, etc.

    \par Component states:
    Components have states for Enabled, Focused,
    MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive
    or produce any events. If a Component has Visible == false, it is not drawn. 

    \par Event response:
    Components can respond to Mouse, Key, and Focus events.

    \par Event production: Components produce Mouse, Key, Focus, Component, and
    ToolTip events if enabled.

    \par Drawing: Component handles setting up the clipping of a component, and
    the drawing of the Border, Background, and Foreground.  The Border,
    Background, and Foreground used when drawing a Component depends on it's
    state, and can also be overridden by inheriting classes. There are separate
    Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat
    states.

    \par Layout: The position and size of a Component is controlled by the
    OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer
    like OSG::Panel, the OSG::Layout attached to the container is used to control
    the position and size of components.  For more complex containers like
    OSG::SplitPanel, the position and size are controlled by the specific
    behavior of the container.
    \warning User code should never set the position or size of a Component
    directly, this is controlled by the OSG::ComponentContainer of the Component.

    \par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.
    Component has methods for taking, removing, or moving the focus.

    \par ToolTips: A component can have a ToolTip that will appear after a
    configurable amount of time passes with the mouse over the Component.

    \par PopupMenus: A OSG::PopupMenu can be attached to a Component that will
    be activated with a right-click mouse interaction.

    \par Scrolling: Components can be contained in a OSG::Viewport or a
    OSG::ScrollPanel for viewing large Components.

    \par Inheriting: Concrete GUI elements that inherit from Component must
    implement drawInternal().
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt2f           ComponentBase::_sfPosition
    The position of the Component, relative to it parent container.
*/

/*! \var Pnt4f           ComponentBase::_sfClipBounds
    The clipping bounds of the Component.  The indexing of the bounds are: 0=Left,
    1=Right, 2=Top, 3=Bottom.
*/

/*! \var Vec2f           ComponentBase::_sfMinSize
    The minimum suggested size that this Component should be assigned by a parent
    container
*/

/*! \var Vec2f           ComponentBase::_sfMaxSize
    The maximum suggested size that this Component should be assigned by a parent
    container
*/

/*! \var Vec2f           ComponentBase::_sfPreferredSize
    The preferred suggested size that this Component should be assigned by a parent
    container
*/

/*! \var Vec2f           ComponentBase::_sfSize
    The size of the Component.
*/

/*! \var BitVector       ComponentBase::_sfState
    Indicates the states of the Component. States include: Enabled, Visible, Focused, MouseOver, etc;
*/

/*! \var LayoutConstraints * ComponentBase::_sfConstraints
    Specific OSG::LayoutConstraints that may be used by the OSG::Layout of 
    the parent container of this Component.
*/

/*! \var Border *        ComponentBase::_sfBorder
    The border to draw when this Component has no state.
*/

/*! \var Layer *         ComponentBase::_sfBackground
    The background to draw when this Component has no state.
*/

/*! \var Border *        ComponentBase::_sfDisabledBorder
    The border to draw when this Component is disabled.
*/

/*! \var Layer *         ComponentBase::_sfDisabledBackground
    The background to draw when this Component is disabled.
*/

/*! \var bool            ComponentBase::_sfDragEnabled
    Controls whether this Component creates drag-and-drop events when the 
    mouse is dragged.
*/

/*! \var UInt16          ComponentBase::_sfScrollTrackingCharacteristics
    Controls scrolling characteristics.
*/

/*! \var Border *        ComponentBase::_sfFocusedBorder
    The border to draw when this Component is focused.
*/

/*! \var Layer *         ComponentBase::_sfFocusedBackground
    The background to draw when this Component is focused.
*/

/*! \var Border *        ComponentBase::_sfRolloverBorder
    The border to draw when the mouse is hovering over this component.
*/

/*! \var Layer *         ComponentBase::_sfRolloverBackground
    The background to draw when the mouse is hovering over this component.
*/

/*! \var Layer *         ComponentBase::_sfFocusedForeground
    The foreground to draw when this Component is focused.
*/

/*! \var Layer *         ComponentBase::_sfRolloverForeground
    The foreground to draw when the mouse is hovering over this component.
*/

/*! \var Layer *         ComponentBase::_sfDisabledForeground
    The foreground to draw when this Component is disabled.
*/

/*! \var Layer *         ComponentBase::_sfForeground
    The background to draw when this Component has no state.
*/

/*! \var Component *     ComponentBase::_sfToolTip
    The ToolTip used by this Component.  If NULL, then no ToolTip is used.
*/

/*! \var Real32          ComponentBase::_sfOpacity
    The opacity this Compnent is drawn with.  0.0 = transparent, 1.0 = opaque.
*/

/*! \var FieldContainer * ComponentBase::_sfParentContainer
    The Component Container this Component is contained in.
*/

/*! \var bool            ComponentBase::_sfClipping
    Controls whether clipping is used when drawing this component. Under most
    conditions this should be on, otherwise the Component may draw outside of its
    boundaries.
*/

/*! \var PopupMenu *     ComponentBase::_sfPopupMenu
    The OSG::PopupMenu to use for this Component.
*/

/*! \var UInt32          ComponentBase::_sfCursor
    The cursor to use when the mouse is hovering over this Component.
*/

/*! \var ComponentEventSource * ComponentBase::_sfEventSource
    The cursor to use when the mouse is hovering over this Component.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Component *, nsOSG>::_type(
    "ComponentPtr", 
    "AttachmentContainerPtr", 
    Component::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Component *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Component *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Component *,
                           nsOSG);

DataType &FieldTraits< Component *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<Component *, nsOSG>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      Component *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ComponentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "Position",
        "The position of the Component, relative to it parent container.\n",
        PositionFieldId, PositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePosition),
        static_cast<FieldGetMethodSig >(&Component::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt4f::Description(
        SFPnt4f::getClassType(),
        "ClipBounds",
        "The clipping bounds of the Component.  The indexing of the bounds are: 0=Left,\n"
        "1=Right, 2=Top, 3=Bottom.\n",
        ClipBoundsFieldId, ClipBoundsFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleClipBounds),
        static_cast<FieldGetMethodSig >(&Component::getHandleClipBounds));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "MinSize",
        "The minimum suggested size that this Component should be assigned by a parent\n"
        "container\n",
        MinSizeFieldId, MinSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleMinSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleMinSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "MaxSize",
        "The maximum suggested size that this Component should be assigned by a parent\n"
        "container\n",
        MaxSizeFieldId, MaxSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleMaxSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleMaxSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "PreferredSize",
        "The preferred suggested size that this Component should be assigned by a parent\n"
        "container\n",
        PreferredSizeFieldId, PreferredSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePreferredSize),
        static_cast<FieldGetMethodSig >(&Component::getHandlePreferredSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "Size",
        "The size of the Component.\n",
        SizeFieldId, SizeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleSize),
        static_cast<FieldGetMethodSig >(&Component::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBitVector::Description(
        SFBitVector::getClassType(),
        "State",
        "Indicates the states of the Component. States include: Enabled, Visible, Focused, MouseOver, etc;\n",
        StateFieldId, StateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleState),
        static_cast<FieldGetMethodSig >(&Component::getHandleState));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildLayoutConstraintsPtr::Description(
        SFUnrecChildLayoutConstraintsPtr::getClassType(),
        "Constraints",
        "Specific OSG::LayoutConstraints that may be used by the OSG::Layout of \n"
        "the parent container of this Component.\n",
        ConstraintsFieldId, ConstraintsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleConstraints),
        static_cast<FieldGetMethodSig >(&Component::getHandleConstraints));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "Border",
        "The border to draw when this Component has no state.\n",
        BorderFieldId, BorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "Background",
        "The background to draw when this Component has no state.\n",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "DisabledBorder",
        "The border to draw when this Component is disabled.\n",
        DisabledBorderFieldId, DisabledBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "DisabledBackground",
        "The background to draw when this Component is disabled.\n",
        DisabledBackgroundFieldId, DisabledBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "DragEnabled",
        "Controls whether this Component creates drag-and-drop events when the \n"
        "mouse is dragged.\n",
        DragEnabledFieldId, DragEnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDragEnabled),
        static_cast<FieldGetMethodSig >(&Component::getHandleDragEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "ScrollTrackingCharacteristics",
        "Controls scrolling characteristics.\n",
        ScrollTrackingCharacteristicsFieldId, ScrollTrackingCharacteristicsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleScrollTrackingCharacteristics),
        static_cast<FieldGetMethodSig >(&Component::getHandleScrollTrackingCharacteristics));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "FocusedBorder",
        "The border to draw when this Component is focused.\n",
        FocusedBorderFieldId, FocusedBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedBackground",
        "The background to draw when this Component is focused.\n",
        FocusedBackgroundFieldId, FocusedBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBorderPtr::Description(
        SFUnrecBorderPtr::getClassType(),
        "RolloverBorder",
        "The border to draw when the mouse is hovering over this component.\n",
        RolloverBorderFieldId, RolloverBorderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverBorder),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverBorder));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "RolloverBackground",
        "The background to draw when the mouse is hovering over this component.\n",
        RolloverBackgroundFieldId, RolloverBackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverBackground),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "FocusedForeground",
        "The foreground to draw when this Component is focused.\n",
        FocusedForegroundFieldId, FocusedForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleFocusedForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleFocusedForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "RolloverForeground",
        "The foreground to draw when the mouse is hovering over this component.\n",
        RolloverForegroundFieldId, RolloverForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleRolloverForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleRolloverForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "DisabledForeground",
        "The foreground to draw when this Component is disabled.\n",
        DisabledForegroundFieldId, DisabledForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleDisabledForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleDisabledForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecLayerPtr::Description(
        SFUnrecLayerPtr::getClassType(),
        "Foreground",
        "The background to draw when this Component has no state.\n",
        ForegroundFieldId, ForegroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleForeground),
        static_cast<FieldGetMethodSig >(&Component::getHandleForeground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentPtr::Description(
        SFUnrecComponentPtr::getClassType(),
        "ToolTip",
        "The ToolTip used by this Component.  If NULL, then no ToolTip is used.\n",
        ToolTipFieldId, ToolTipFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleToolTip),
        static_cast<FieldGetMethodSig >(&Component::getHandleToolTip));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Opacity",
        "The opacity this Compnent is drawn with.  0.0 = transparent, 1.0 = opaque.\n",
        OpacityFieldId, OpacityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleOpacity),
        static_cast<FieldGetMethodSig >(&Component::getHandleOpacity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "ParentContainer",
        "The Component Container this Component is contained in.\n",
        ParentContainerFieldId, ParentContainerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Component::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Component::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Clipping",
        "Controls whether clipping is used when drawing this component. Under most\n"
        "conditions this should be on, otherwise the Component may draw outside of its\n"
        "boundaries.\n",
        ClippingFieldId, ClippingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleClipping),
        static_cast<FieldGetMethodSig >(&Component::getHandleClipping));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPopupMenuPtr::Description(
        SFUnrecPopupMenuPtr::getClassType(),
        "PopupMenu",
        "The OSG::PopupMenu to use for this Component.\n",
        PopupMenuFieldId, PopupMenuFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandlePopupMenu),
        static_cast<FieldGetMethodSig >(&Component::getHandlePopupMenu));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Cursor",
        "The cursor to use when the mouse is hovering over this Component.\n",
        CursorFieldId, CursorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleCursor),
        static_cast<FieldGetMethodSig >(&Component::getHandleCursor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComponentEventSourcePtr::Description(
        SFUnrecComponentEventSourcePtr::getClassType(),
        "EventSource",
        "The cursor to use when the mouse is hovering over this Component.\n",
        EventSourceFieldId, EventSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Component::editHandleEventSource),
        static_cast<FieldGetMethodSig >(&Component::getHandleEventSource));

    oType.addInitialDesc(pDesc);
}


ComponentBase::TypeObject ComponentBase::_type(
    ComponentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    Component::initMethod,
    Component::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Component::classDescInserter),
    false,
    StateFieldMask,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"Component\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribToolboxUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"true\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    fieldsUnmarkedOnCreate=\"StateFieldMask\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    childFields=\"multi\"\n"
    "    >\n"
    "    \\brief An element of a graphical user interface.\n"
    "\n"
    "    A Component represents a single element of a user interface. In other\n"
    "    frameworks they may be called widgets or controls. All concrete GUI elements\n"
    "    inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,\n"
    "    OSG::InternalWindow, etc.\n"
    "\n"
    "    \\par Component states:\n"
    "    Components have states for Enabled, Focused,\n"
    "    MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive\n"
    "    or produce any events. If a Component has Visible == false, it is not drawn. \n"
    "\n"
    "    \\par Event response:\n"
    "    Components can respond to Mouse, Key, and Focus events.\n"
    "\n"
    "    \\par Event production: Components produce Mouse, Key, Focus, Component, and\n"
    "    ToolTip events if enabled.\n"
    "\n"
    "    \\par Drawing: Component handles setting up the clipping of a component, and\n"
    "    the drawing of the Border, Background, and Foreground.  The Border,\n"
    "    Background, and Foreground used when drawing a Component depends on it's\n"
    "    state, and can also be overridden by inheriting classes. There are separate\n"
    "    Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat\n"
    "    states.\n"
    "\n"
    "    \\par Layout: The position and size of a Component is controlled by the\n"
    "    OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer\n"
    "    like OSG::Panel, the OSG::Layout attached to the container is used to control\n"
    "    the position and size of components.  For more complex containers like\n"
    "    OSG::SplitPanel, the position and size are controlled by the specific\n"
    "    behavior of the container.\n"
    "    \\warning User code should never set the position or size of a Component\n"
    "    directly, this is controlled by the OSG::ComponentContainer of the Component.\n"
    "\n"
    "\n"
    "    \\par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.\n"
    "    Component has methods for taking, removing, or moving the focus.\n"
    "\n"
    "    \\par ToolTips: A component can have a ToolTip that will appear after a\n"
    "    configurable amount of time passes with the mouse over the Component.\n"
    "\n"
    "    \\par PopupMenus: A OSG::PopupMenu can be attached to a Component that will\n"
    "    be activated with a right-click mouse interaction.\n"
    "\n"
    "    \\par Scrolling: Components can be contained in a OSG::Viewport or a\n"
    "    OSG::ScrollPanel for viewing large Components.\n"
    "\n"
    "    \\par Inheriting: Concrete GUI elements that inherit from Component must\n"
    "    implement drawInternal().\n"
    "    <Field\n"
    "        name=\"Position\"\n"
    "        type=\"Pnt2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The position of the Component, relative to it parent container.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ClipBounds\"\n"
    "        type=\"Pnt4f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0.0f,0.0f,0.0f,0.0f\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The clipping bounds of the Component.  The indexing of the bounds are: 0=Left,\n"
    "        1=Right, 2=Top, 3=Bottom.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MinSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The minimum suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"MaxSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"32767,32767\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The maximum suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"PreferredSize\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"1,1\"\n"
    "        >\n"
    "        The preferred suggested size that this Component should be assigned by a parent\n"
    "        container\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Size\"\n"
    "        type=\"Vec2f\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The size of the Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"State\"\n"
    "        type=\"BitVector\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"Component::EnabledStateMask | Component::VisibleStateMask\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Indicates the states of the Component. States include: Enabled, Visible, Focused, MouseOver, etc;\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Constraints\"\n"
    "        type=\"LayoutConstraints\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentComponent\"\n"
    "        >\n"
    "        Specific OSG::LayoutConstraints that may be used by the OSG::Layout of \n"
    "        the parent container of this Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Border\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Background\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledBorder\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DragEnabled\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls whether this Component creates drag-and-drop events when the \n"
    "        mouse is dragged.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ScrollTrackingCharacteristics\"\n"
    "        type=\"UInt16\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"Component::SCROLLABLE_TRACKING_OFF\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls scrolling characteristics.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedBorder\"\n"
    "        type=\"Border\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"pointer\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverBorder\"\n"
    "        type=\"Border\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The border to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverBackground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"FocusedForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when this Component is focused.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"RolloverForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when the mouse is hovering over this component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DisabledForeground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The foreground to draw when this Component is disabled.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Foreground\"\n"
    "        type=\"Layer\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The background to draw when this Component has no state.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ToolTip\"\n"
    "        type=\"Component\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The ToolTip used by this Component.  If NULL, then no ToolTip is used.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Opacity\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The opacity this Compnent is drawn with.  0.0 = transparent, 1.0 = opaque.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ParentContainer\"\n"
    "        type=\"FieldContainer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"none\"\n"
    "        category=\"parentpointer\"\n"
    "        >\n"
    "        The Component Container this Component is contained in.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Clipping\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Controls whether clipping is used when drawing this component. Under most\n"
    "        conditions this should be on, otherwise the Component may draw outside of its\n"
    "        boundaries.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"PopupMenu\"\n"
    "        type=\"PopupMenu\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The OSG::PopupMenu to use for this Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Cursor\"\n"
    "        type=\"UInt32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"WindowEventProducer::CURSOR_POINTER\"\n"
    "        defaultHeader=\"OSGWindowEventProducer.h\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The cursor to use when the mouse is hovering over this Component.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"EventSource\"\n"
    "        type=\"ComponentEventSource\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The cursor to use when the mouse is hovering over this Component.\n"
    "    </Field>    \n"
    "<!--    \n"
    "    <ProducedEvent\n"
    "        name=\"MouseMoved\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and moves.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseDragged\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and moves \n"
    "        when a mouse button is down.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseClicked\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is clicked.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseEntered\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse enters this Component.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseExited\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse exits this Component.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MousePressed\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is pressed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseReleased\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and a \n"
    "        mouse button is released.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseWheelMoved\"\n"
    "        detailsType=\"MouseWheelEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the mouse is hovering over this Component and the\n"
    "        mouse wheel is moved.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyPressed\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        pressed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyReleased\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        released.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyTyped\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component has focused and a keyboard key is \n"
    "        typed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"FocusGained\"\n"
    "        detailsType=\"FocusEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component gains focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"FocusLost\"\n"
    "        detailsType=\"FocusEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component loses focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentHidden\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Visible field is set to false.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentVisible\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Visible field is set to true.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentMoved\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Position field changes.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentResized\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Size field changes.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentEnabled\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Enabled field is set to true.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ComponentDisabled\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when this Component's Enabled field is set to false.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ToolTipActivated\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the ToolTip for this Component is activated.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"ToolTipDeactivated\"\n"
    "        detailsType=\"ComponentEventDetails\"\n"
    "        consumable=\"true\"\n"
    "        >\n"
    "        Event produced when the ToolTip for this Component is deactivated.\n"
    "    </ProducedEvent>\n"
    "-->\n"
    "</FieldContainer>\n",
    "\\brief An element of a graphical user interface.\n"
    "\n"
    "A Component represents a single element of a user interface. In other\n"
    "frameworks they may be called widgets or controls. All concrete GUI elements\n"
    "inherit from Component, like OSG::Button, OSG::Label, OSG::TextField,\n"
    "OSG::InternalWindow, etc.\n"
    "\n"
    "\\par Component states:\n"
    "Components have states for Enabled, Focused,\n"
    "MouseOver, and Visible.  If a Component has Enabled == false, it doesn't receive\n"
    "or produce any events. If a Component has Visible == false, it is not drawn. \n"
    "\n"
    "\\par Event response:\n"
    "Components can respond to Mouse, Key, and Focus events.\n"
    "\n"
    "\\par Event production: Components produce Mouse, Key, Focus, Component, and\n"
    "ToolTip events if enabled.\n"
    "\n"
    "\\par Drawing: Component handles setting up the clipping of a component, and\n"
    "the drawing of the Border, Background, and Foreground.  The Border,\n"
    "Background, and Foreground used when drawing a Component depends on it's\n"
    "state, and can also be overridden by inheriting classes. There are separate\n"
    "Border, Background, and Foregrounds for Disabled, Focused, Rollover, and No stat\n"
    "states.\n"
    "\n"
    "\\par Layout: The position and size of a Component is controlled by the\n"
    "OSG::ComponentContainer that contains it. For simple OSG::ComponentContainer\n"
    "like OSG::Panel, the OSG::Layout attached to the container is used to control\n"
    "the position and size of components.  For more complex containers like\n"
    "OSG::SplitPanel, the position and size are controlled by the specific\n"
    "behavior of the container.\n"
    "\\warning User code should never set the position or size of a Component\n"
    "directly, this is controlled by the OSG::ComponentContainer of the Component.\n"
    "\n"
    "\n"
    "\\par Focus: Zero, or one Component can have focus in a OSG::InternalWindow.\n"
    "Component has methods for taking, removing, or moving the focus.\n"
    "\n"
    "\\par ToolTips: A component can have a ToolTip that will appear after a\n"
    "configurable amount of time passes with the mouse over the Component.\n"
    "\n"
    "\\par PopupMenus: A OSG::PopupMenu can be attached to a Component that will\n"
    "be activated with a right-click mouse interaction.\n"
    "\n"
    "\\par Scrolling: Components can be contained in a OSG::Viewport or a\n"
    "OSG::ScrollPanel for viewing large Components.\n"
    "\n"
    "\\par Inheriting: Concrete GUI elements that inherit from Component must\n"
    "implement drawInternal().\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ComponentBase::getType(void)
{
    return _type;
}

const FieldContainerType &ComponentBase::getType(void) const
{
    return _type;
}

UInt32 ComponentBase::getContainerSize(void) const
{
    return sizeof(Component);
}

/*------------------------- decorator get ------------------------------*/


SFPnt2f *ComponentBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFPnt2f *ComponentBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFPnt4f *ComponentBase::editSFClipBounds(void)
{
    editSField(ClipBoundsFieldMask);

    return &_sfClipBounds;
}

const SFPnt4f *ComponentBase::getSFClipBounds(void) const
{
    return &_sfClipBounds;
}


SFVec2f *ComponentBase::editSFMinSize(void)
{
    editSField(MinSizeFieldMask);

    return &_sfMinSize;
}

const SFVec2f *ComponentBase::getSFMinSize(void) const
{
    return &_sfMinSize;
}


SFVec2f *ComponentBase::editSFMaxSize(void)
{
    editSField(MaxSizeFieldMask);

    return &_sfMaxSize;
}

const SFVec2f *ComponentBase::getSFMaxSize(void) const
{
    return &_sfMaxSize;
}


SFVec2f *ComponentBase::editSFPreferredSize(void)
{
    editSField(PreferredSizeFieldMask);

    return &_sfPreferredSize;
}

const SFVec2f *ComponentBase::getSFPreferredSize(void) const
{
    return &_sfPreferredSize;
}


SFVec2f *ComponentBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFVec2f *ComponentBase::getSFSize(void) const
{
    return &_sfSize;
}


SFBitVector *ComponentBase::editSFState(void)
{
    editSField(StateFieldMask);

    return &_sfState;
}

const SFBitVector *ComponentBase::getSFState(void) const
{
    return &_sfState;
}


//! Get the Component::_sfConstraints field.
const SFUnrecChildLayoutConstraintsPtr *ComponentBase::getSFConstraints(void) const
{
    return &_sfConstraints;
}

SFUnrecChildLayoutConstraintsPtr *ComponentBase::editSFConstraints    (void)
{
    editSField(ConstraintsFieldMask);

    return &_sfConstraints;
}

//! Get the Component::_sfBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFBorder(void) const
{
    return &_sfBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFBorder         (void)
{
    editSField(BorderFieldMask);

    return &_sfBorder;
}

//! Get the Component::_sfBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}

//! Get the Component::_sfDisabledBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFDisabledBorder(void) const
{
    return &_sfDisabledBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFDisabledBorder (void)
{
    editSField(DisabledBorderFieldMask);

    return &_sfDisabledBorder;
}

//! Get the Component::_sfDisabledBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFDisabledBackground(void) const
{
    return &_sfDisabledBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFDisabledBackground(void)
{
    editSField(DisabledBackgroundFieldMask);

    return &_sfDisabledBackground;
}

SFBool *ComponentBase::editSFDragEnabled(void)
{
    editSField(DragEnabledFieldMask);

    return &_sfDragEnabled;
}

const SFBool *ComponentBase::getSFDragEnabled(void) const
{
    return &_sfDragEnabled;
}


SFUInt16 *ComponentBase::editSFScrollTrackingCharacteristics(void)
{
    editSField(ScrollTrackingCharacteristicsFieldMask);

    return &_sfScrollTrackingCharacteristics;
}

const SFUInt16 *ComponentBase::getSFScrollTrackingCharacteristics(void) const
{
    return &_sfScrollTrackingCharacteristics;
}


//! Get the Component::_sfFocusedBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFFocusedBorder(void) const
{
    return &_sfFocusedBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFFocusedBorder  (void)
{
    editSField(FocusedBorderFieldMask);

    return &_sfFocusedBorder;
}

//! Get the Component::_sfFocusedBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFFocusedBackground(void) const
{
    return &_sfFocusedBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFFocusedBackground(void)
{
    editSField(FocusedBackgroundFieldMask);

    return &_sfFocusedBackground;
}

//! Get the Component::_sfRolloverBorder field.
const SFUnrecBorderPtr *ComponentBase::getSFRolloverBorder(void) const
{
    return &_sfRolloverBorder;
}

SFUnrecBorderPtr    *ComponentBase::editSFRolloverBorder (void)
{
    editSField(RolloverBorderFieldMask);

    return &_sfRolloverBorder;
}

//! Get the Component::_sfRolloverBackground field.
const SFUnrecLayerPtr *ComponentBase::getSFRolloverBackground(void) const
{
    return &_sfRolloverBackground;
}

SFUnrecLayerPtr     *ComponentBase::editSFRolloverBackground(void)
{
    editSField(RolloverBackgroundFieldMask);

    return &_sfRolloverBackground;
}

//! Get the Component::_sfFocusedForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFFocusedForeground(void) const
{
    return &_sfFocusedForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFFocusedForeground(void)
{
    editSField(FocusedForegroundFieldMask);

    return &_sfFocusedForeground;
}

//! Get the Component::_sfRolloverForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFRolloverForeground(void) const
{
    return &_sfRolloverForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFRolloverForeground(void)
{
    editSField(RolloverForegroundFieldMask);

    return &_sfRolloverForeground;
}

//! Get the Component::_sfDisabledForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFDisabledForeground(void) const
{
    return &_sfDisabledForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFDisabledForeground(void)
{
    editSField(DisabledForegroundFieldMask);

    return &_sfDisabledForeground;
}

//! Get the Component::_sfForeground field.
const SFUnrecLayerPtr *ComponentBase::getSFForeground(void) const
{
    return &_sfForeground;
}

SFUnrecLayerPtr     *ComponentBase::editSFForeground     (void)
{
    editSField(ForegroundFieldMask);

    return &_sfForeground;
}

//! Get the Component::_sfToolTip field.
const SFUnrecComponentPtr *ComponentBase::getSFToolTip(void) const
{
    return &_sfToolTip;
}

SFUnrecComponentPtr *ComponentBase::editSFToolTip        (void)
{
    editSField(ToolTipFieldMask);

    return &_sfToolTip;
}

SFReal32 *ComponentBase::editSFOpacity(void)
{
    editSField(OpacityFieldMask);

    return &_sfOpacity;
}

const SFReal32 *ComponentBase::getSFOpacity(void) const
{
    return &_sfOpacity;
}



SFBool *ComponentBase::editSFClipping(void)
{
    editSField(ClippingFieldMask);

    return &_sfClipping;
}

const SFBool *ComponentBase::getSFClipping(void) const
{
    return &_sfClipping;
}


//! Get the Component::_sfPopupMenu field.
const SFUnrecPopupMenuPtr *ComponentBase::getSFPopupMenu(void) const
{
    return &_sfPopupMenu;
}

SFUnrecPopupMenuPtr *ComponentBase::editSFPopupMenu      (void)
{
    editSField(PopupMenuFieldMask);

    return &_sfPopupMenu;
}

SFUInt32 *ComponentBase::editSFCursor(void)
{
    editSField(CursorFieldMask);

    return &_sfCursor;
}

const SFUInt32 *ComponentBase::getSFCursor(void) const
{
    return &_sfCursor;
}


//! Get the Component::_sfEventSource field.
const SFUnrecComponentEventSourcePtr *ComponentBase::getSFEventSource(void) const
{
    return &_sfEventSource;
}

SFUnrecComponentEventSourcePtr *ComponentBase::editSFEventSource    (void)
{
    editSField(EventSourceFieldMask);

    return &_sfEventSource;
}





/*------------------------------ access -----------------------------------*/

SizeT ComponentBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        returnValue += _sfClipBounds.getBinSize();
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        returnValue += _sfMinSize.getBinSize();
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        returnValue += _sfMaxSize.getBinSize();
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        returnValue += _sfPreferredSize.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (StateFieldMask & whichField))
    {
        returnValue += _sfState.getBinSize();
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        returnValue += _sfConstraints.getBinSize();
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        returnValue += _sfBorder.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        returnValue += _sfDisabledBorder.getBinSize();
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        returnValue += _sfDisabledBackground.getBinSize();
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        returnValue += _sfDragEnabled.getBinSize();
    }
    if(FieldBits::NoField != (ScrollTrackingCharacteristicsFieldMask & whichField))
    {
        returnValue += _sfScrollTrackingCharacteristics.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        returnValue += _sfFocusedBorder.getBinSize();
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        returnValue += _sfFocusedBackground.getBinSize();
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        returnValue += _sfRolloverBorder.getBinSize();
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        returnValue += _sfRolloverBackground.getBinSize();
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        returnValue += _sfFocusedForeground.getBinSize();
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        returnValue += _sfRolloverForeground.getBinSize();
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        returnValue += _sfDisabledForeground.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        returnValue += _sfForeground.getBinSize();
    }
    if(FieldBits::NoField != (ToolTipFieldMask & whichField))
    {
        returnValue += _sfToolTip.getBinSize();
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        returnValue += _sfOpacity.getBinSize();
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        returnValue += _sfParentContainer.getBinSize();
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        returnValue += _sfClipping.getBinSize();
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        returnValue += _sfPopupMenu.getBinSize();
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        returnValue += _sfCursor.getBinSize();
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        returnValue += _sfEventSource.getBinSize();
    }

    return returnValue;
}

void ComponentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        _sfClipBounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        _sfMinSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        _sfMaxSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        _sfPreferredSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StateFieldMask & whichField))
    {
        _sfState.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        _sfConstraints.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        _sfBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        _sfDisabledBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        _sfDisabledBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        _sfDragEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScrollTrackingCharacteristicsFieldMask & whichField))
    {
        _sfScrollTrackingCharacteristics.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        _sfFocusedBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        _sfFocusedBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        _sfRolloverBorder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        _sfRolloverBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        _sfFocusedForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        _sfRolloverForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        _sfDisabledForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        _sfForeground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipFieldMask & whichField))
    {
        _sfToolTip.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        _sfOpacity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        _sfParentContainer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        _sfClipping.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        _sfPopupMenu.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        _sfCursor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        _sfEventSource.copyToBin(pMem);
    }
}

void ComponentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        editSField(PositionFieldMask);
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClipBoundsFieldMask & whichField))
    {
        editSField(ClipBoundsFieldMask);
        _sfClipBounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinSizeFieldMask & whichField))
    {
        editSField(MinSizeFieldMask);
        _sfMinSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
    {
        editSField(MaxSizeFieldMask);
        _sfMaxSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreferredSizeFieldMask & whichField))
    {
        editSField(PreferredSizeFieldMask);
        _sfPreferredSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        editSField(SizeFieldMask);
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StateFieldMask & whichField))
    {
        editSField(StateFieldMask);
        _sfState.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConstraintsFieldMask & whichField))
    {
        editSField(ConstraintsFieldMask);
        _sfConstraints.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderFieldMask & whichField))
    {
        editSField(BorderFieldMask);
        _sfBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        editSField(BackgroundFieldMask);
        _sfBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBorderFieldMask & whichField))
    {
        editSField(DisabledBorderFieldMask);
        _sfDisabledBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledBackgroundFieldMask & whichField))
    {
        editSField(DisabledBackgroundFieldMask);
        _sfDisabledBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DragEnabledFieldMask & whichField))
    {
        editSField(DragEnabledFieldMask);
        _sfDragEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScrollTrackingCharacteristicsFieldMask & whichField))
    {
        editSField(ScrollTrackingCharacteristicsFieldMask);
        _sfScrollTrackingCharacteristics.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBorderFieldMask & whichField))
    {
        editSField(FocusedBorderFieldMask);
        _sfFocusedBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedBackgroundFieldMask & whichField))
    {
        editSField(FocusedBackgroundFieldMask);
        _sfFocusedBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBorderFieldMask & whichField))
    {
        editSField(RolloverBorderFieldMask);
        _sfRolloverBorder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverBackgroundFieldMask & whichField))
    {
        editSField(RolloverBackgroundFieldMask);
        _sfRolloverBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedForegroundFieldMask & whichField))
    {
        editSField(FocusedForegroundFieldMask);
        _sfFocusedForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverForegroundFieldMask & whichField))
    {
        editSField(RolloverForegroundFieldMask);
        _sfRolloverForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledForegroundFieldMask & whichField))
    {
        editSField(DisabledForegroundFieldMask);
        _sfDisabledForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundFieldMask & whichField))
    {
        editSField(ForegroundFieldMask);
        _sfForeground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ToolTipFieldMask & whichField))
    {
        editSField(ToolTipFieldMask);
        _sfToolTip.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OpacityFieldMask & whichField))
    {
        editSField(OpacityFieldMask);
        _sfOpacity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentContainerFieldMask & whichField))
    {
        editSField(ParentContainerFieldMask);
        _sfParentContainer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClippingFieldMask & whichField))
    {
        editSField(ClippingFieldMask);
        _sfClipping.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PopupMenuFieldMask & whichField))
    {
        editSField(PopupMenuFieldMask);
        _sfPopupMenu.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CursorFieldMask & whichField))
    {
        editSField(CursorFieldMask);
        _sfCursor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        editSField(EventSourceFieldMask);
        _sfEventSource.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ComponentBase::ComponentBase(void) :
    Inherited(),
    _sfPosition               (Pnt2f(0,0)),
    _sfClipBounds             (Pnt4f(0.0f,0.0f,0.0f,0.0f)),
    _sfMinSize                (Vec2f(0,0)),
    _sfMaxSize                (Vec2f(32767,32767)),
    _sfPreferredSize          (Vec2f(1,1)),
    _sfSize                   (),
    _sfState                  (BitVector(Component::EnabledStateMask | Component::VisibleStateMask)),
    _sfConstraints            (this,
                          ConstraintsFieldId,
                          LayoutConstraints::ParentComponentFieldId),
    _sfBorder                 (NULL),
    _sfBackground             (NULL),
    _sfDisabledBorder         (NULL),
    _sfDisabledBackground     (NULL),
    _sfDragEnabled            (bool(false)),
    _sfScrollTrackingCharacteristics(UInt16(Component::SCROLLABLE_TRACKING_OFF)),
    _sfFocusedBorder          (NULL),
    _sfFocusedBackground      (NULL),
    _sfRolloverBorder         (NULL),
    _sfRolloverBackground     (NULL),
    _sfFocusedForeground      (NULL),
    _sfRolloverForeground     (NULL),
    _sfDisabledForeground     (NULL),
    _sfForeground             (NULL),
    _sfToolTip                (NULL),
    _sfOpacity                (Real32(1.0)),
    _sfParentContainer        (NULL),
    _sfClipping               (bool(true)),
    _sfPopupMenu              (NULL),
    _sfCursor                 (UInt32(WindowEventProducer::CURSOR_POINTER)),
    _sfEventSource            (NULL)
{
}

ComponentBase::ComponentBase(const ComponentBase &source) :
    Inherited(source),
    _sfPosition               (source._sfPosition               ),
    _sfClipBounds             (source._sfClipBounds             ),
    _sfMinSize                (source._sfMinSize                ),
    _sfMaxSize                (source._sfMaxSize                ),
    _sfPreferredSize          (source._sfPreferredSize          ),
    _sfSize                   (source._sfSize                   ),
    _sfState                  (source._sfState                  ),
    _sfConstraints            (this,
                          ConstraintsFieldId,
                          LayoutConstraints::ParentComponentFieldId),
    _sfBorder                 (NULL),
    _sfBackground             (NULL),
    _sfDisabledBorder         (NULL),
    _sfDisabledBackground     (NULL),
    _sfDragEnabled            (source._sfDragEnabled            ),
    _sfScrollTrackingCharacteristics(source._sfScrollTrackingCharacteristics),
    _sfFocusedBorder          (NULL),
    _sfFocusedBackground      (NULL),
    _sfRolloverBorder         (NULL),
    _sfRolloverBackground     (NULL),
    _sfFocusedForeground      (NULL),
    _sfRolloverForeground     (NULL),
    _sfDisabledForeground     (NULL),
    _sfForeground             (NULL),
    _sfToolTip                (NULL),
    _sfOpacity                (source._sfOpacity                ),
    _sfParentContainer        (NULL),
    _sfClipping               (source._sfClipping               ),
    _sfPopupMenu              (NULL),
    _sfCursor                 (source._sfCursor                 ),
    _sfEventSource            (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ComponentBase::~ComponentBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ComponentBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParentContainer.getValue         ();

            UInt16 oldChildFieldId =
                _sfParentContainer.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentContainerFieldMask);

            _sfParentContainer.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ComponentBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentContainerFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParentContainer.getValue() == pTypedParent)
            {
                editSField(ParentContainerFieldMask);

                _sfParentContainer.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ComponentBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ConstraintsFieldId)
    {
        LayoutConstraints * pTypedChild =
            dynamic_cast<LayoutConstraints *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfConstraints.getValue() == pTypedChild)
            {
                editSField(ConstraintsFieldMask);

                _sfConstraints.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ComponentBase::onCreate(const Component *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Component *pThis = static_cast<Component *>(this);

        pThis->setConstraints(source->getConstraints());

        pThis->setBorder(source->getBorder());

        pThis->setBackground(source->getBackground());

        pThis->setDisabledBorder(source->getDisabledBorder());

        pThis->setDisabledBackground(source->getDisabledBackground());

        pThis->setFocusedBorder(source->getFocusedBorder());

        pThis->setFocusedBackground(source->getFocusedBackground());

        pThis->setRolloverBorder(source->getRolloverBorder());

        pThis->setRolloverBackground(source->getRolloverBackground());

        pThis->setFocusedForeground(source->getFocusedForeground());

        pThis->setRolloverForeground(source->getRolloverForeground());

        pThis->setDisabledForeground(source->getDisabledForeground());

        pThis->setForeground(source->getForeground());

        pThis->setToolTip(source->getToolTip());

        pThis->setPopupMenu(source->getPopupMenu());

        pThis->setEventSource(source->getEventSource());
    }
}

GetFieldHandlePtr ComponentBase::getHandlePosition        (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePosition       (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleClipBounds      (void) const
{
    SFPnt4f::GetHandlePtr returnValue(
        new  SFPnt4f::GetHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleClipBounds     (void)
{
    SFPnt4f::EditHandlePtr returnValue(
        new  SFPnt4f::EditHandle(
             &_sfClipBounds,
             this->getType().getFieldDesc(ClipBoundsFieldId),
             this));


    editSField(ClipBoundsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleMinSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleMinSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMinSize,
             this->getType().getFieldDesc(MinSizeFieldId),
             this));


    editSField(MinSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleMaxSize         (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleMaxSize        (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfMaxSize,
             this->getType().getFieldDesc(MaxSizeFieldId),
             this));


    editSField(MaxSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandlePreferredSize   (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePreferredSize  (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPreferredSize,
             this->getType().getFieldDesc(PreferredSizeFieldId),
             this));


    editSField(PreferredSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleState           (void) const
{
    SFBitVector::GetHandlePtr returnValue(
        new  SFBitVector::GetHandle(
             &_sfState,
             this->getType().getFieldDesc(StateFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleState          (void)
{
    SFBitVector::EditHandlePtr returnValue(
        new  SFBitVector::EditHandle(
             &_sfState,
             this->getType().getFieldDesc(StateFieldId),
             this));


    editSField(StateFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleConstraints     (void) const
{
    SFUnrecChildLayoutConstraintsPtr::GetHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::GetHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleConstraints    (void)
{
    SFUnrecChildLayoutConstraintsPtr::EditHandlePtr returnValue(
        new  SFUnrecChildLayoutConstraintsPtr::EditHandle(
             &_sfConstraints,
             this->getType().getFieldDesc(ConstraintsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setConstraints,
                    static_cast<Component *>(this), _1));

    editSField(ConstraintsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleBorder          (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleBorder         (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfBorder,
             this->getType().getFieldDesc(BorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setBorder,
                    static_cast<Component *>(this), _1));

    editSField(BorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleBackground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleBackground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setBackground,
                    static_cast<Component *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfDisabledBorder,
             this->getType().getFieldDesc(DisabledBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledBorder,
                    static_cast<Component *>(this), _1));

    editSField(DisabledBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledBackground,
             this->getType().getFieldDesc(DisabledBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledBackground,
                    static_cast<Component *>(this), _1));

    editSField(DisabledBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDragEnabled     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDragEnabled    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDragEnabled,
             this->getType().getFieldDesc(DragEnabledFieldId),
             this));


    editSField(DragEnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleScrollTrackingCharacteristics (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfScrollTrackingCharacteristics,
             this->getType().getFieldDesc(ScrollTrackingCharacteristicsFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleScrollTrackingCharacteristics(void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfScrollTrackingCharacteristics,
             this->getType().getFieldDesc(ScrollTrackingCharacteristicsFieldId),
             this));


    editSField(ScrollTrackingCharacteristicsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedBorder   (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedBorder  (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfFocusedBorder,
             this->getType().getFieldDesc(FocusedBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedBorder,
                    static_cast<Component *>(this), _1));

    editSField(FocusedBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedBackground,
             this->getType().getFieldDesc(FocusedBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedBackground,
                    static_cast<Component *>(this), _1));

    editSField(FocusedBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverBorder  (void) const
{
    SFUnrecBorderPtr::GetHandlePtr returnValue(
        new  SFUnrecBorderPtr::GetHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverBorder (void)
{
    SFUnrecBorderPtr::EditHandlePtr returnValue(
        new  SFUnrecBorderPtr::EditHandle(
             &_sfRolloverBorder,
             this->getType().getFieldDesc(RolloverBorderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverBorder,
                    static_cast<Component *>(this), _1));

    editSField(RolloverBorderFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverBackground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverBackground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverBackground,
             this->getType().getFieldDesc(RolloverBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverBackground,
                    static_cast<Component *>(this), _1));

    editSField(RolloverBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleFocusedForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleFocusedForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfFocusedForeground,
             this->getType().getFieldDesc(FocusedForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setFocusedForeground,
                    static_cast<Component *>(this), _1));

    editSField(FocusedForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleRolloverForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleRolloverForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfRolloverForeground,
             this->getType().getFieldDesc(RolloverForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setRolloverForeground,
                    static_cast<Component *>(this), _1));

    editSField(RolloverForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleDisabledForeground (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleDisabledForeground(void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfDisabledForeground,
             this->getType().getFieldDesc(DisabledForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setDisabledForeground,
                    static_cast<Component *>(this), _1));

    editSField(DisabledForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleForeground      (void) const
{
    SFUnrecLayerPtr::GetHandlePtr returnValue(
        new  SFUnrecLayerPtr::GetHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleForeground     (void)
{
    SFUnrecLayerPtr::EditHandlePtr returnValue(
        new  SFUnrecLayerPtr::EditHandle(
             &_sfForeground,
             this->getType().getFieldDesc(ForegroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setForeground,
                    static_cast<Component *>(this), _1));

    editSField(ForegroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleToolTip         (void) const
{
    SFUnrecComponentPtr::GetHandlePtr returnValue(
        new  SFUnrecComponentPtr::GetHandle(
             &_sfToolTip,
             this->getType().getFieldDesc(ToolTipFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleToolTip        (void)
{
    SFUnrecComponentPtr::EditHandlePtr returnValue(
        new  SFUnrecComponentPtr::EditHandle(
             &_sfToolTip,
             this->getType().getFieldDesc(ToolTipFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setToolTip,
                    static_cast<Component *>(this), _1));

    editSField(ToolTipFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleOpacity         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleOpacity        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOpacity,
             this->getType().getFieldDesc(OpacityFieldId),
             this));


    editSField(OpacityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleParentContainer (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleParentContainer(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleClipping        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleClipping       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClipping,
             this->getType().getFieldDesc(ClippingFieldId),
             this));


    editSField(ClippingFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandlePopupMenu       (void) const
{
    SFUnrecPopupMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::GetHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandlePopupMenu      (void)
{
    SFUnrecPopupMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecPopupMenuPtr::EditHandle(
             &_sfPopupMenu,
             this->getType().getFieldDesc(PopupMenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setPopupMenu,
                    static_cast<Component *>(this), _1));

    editSField(PopupMenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleCursor          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleCursor         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCursor,
             this->getType().getFieldDesc(CursorFieldId),
             this));


    editSField(CursorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ComponentBase::getHandleEventSource     (void) const
{
    SFUnrecComponentEventSourcePtr::GetHandlePtr returnValue(
        new  SFUnrecComponentEventSourcePtr::GetHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             const_cast<ComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ComponentBase::editHandleEventSource    (void)
{
    SFUnrecComponentEventSourcePtr::EditHandlePtr returnValue(
        new  SFUnrecComponentEventSourcePtr::EditHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Component::setEventSource,
                    static_cast<Component *>(this), _1));

    editSField(EventSourceFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ComponentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Component *pThis = static_cast<Component *>(this);

    pThis->execSync(static_cast<Component *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ComponentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Component *>(this)->setConstraints(NULL);

    static_cast<Component *>(this)->setBorder(NULL);

    static_cast<Component *>(this)->setBackground(NULL);

    static_cast<Component *>(this)->setDisabledBorder(NULL);

    static_cast<Component *>(this)->setDisabledBackground(NULL);

    static_cast<Component *>(this)->setFocusedBorder(NULL);

    static_cast<Component *>(this)->setFocusedBackground(NULL);

    static_cast<Component *>(this)->setRolloverBorder(NULL);

    static_cast<Component *>(this)->setRolloverBackground(NULL);

    static_cast<Component *>(this)->setFocusedForeground(NULL);

    static_cast<Component *>(this)->setRolloverForeground(NULL);

    static_cast<Component *>(this)->setDisabledForeground(NULL);

    static_cast<Component *>(this)->setForeground(NULL);

    static_cast<Component *>(this)->setToolTip(NULL);

    static_cast<Component *>(this)->setPopupMenu(NULL);

    static_cast<Component *>(this)->setEventSource(NULL);


}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Component::_sfPosition field.

Pnt2f &ComponentBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the Component::_sfPosition field.
const Pnt2f &ComponentBase::getPosition(void) const
{
    return _sfPosition.getValue();
}


//! Set the value of the Component::_sfPosition field.
void ComponentBase::setPosition(const Pnt2f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the Component::_sfClipBounds field.

Pnt4f &ComponentBase::editClipBounds(void)
{
    editSField(ClipBoundsFieldMask);

    return _sfClipBounds.getValue();
}

//! Get the value of the Component::_sfClipBounds field.
const Pnt4f &ComponentBase::getClipBounds(void) const
{
    return _sfClipBounds.getValue();
}


//! Set the value of the Component::_sfClipBounds field.
void ComponentBase::setClipBounds(const Pnt4f &value)
{
    editSField(ClipBoundsFieldMask);

    _sfClipBounds.setValue(value);
}
//! Get the value of the Component::_sfMinSize field.

Vec2f &ComponentBase::editMinSize(void)
{
    editSField(MinSizeFieldMask);

    return _sfMinSize.getValue();
}

//! Get the value of the Component::_sfMinSize field.
const Vec2f &ComponentBase::getMinSize(void) const
{
    return _sfMinSize.getValue();
}


//! Set the value of the Component::_sfMinSize field.
void ComponentBase::setMinSize(const Vec2f &value)
{
    editSField(MinSizeFieldMask);

    _sfMinSize.setValue(value);
}
//! Get the value of the Component::_sfMaxSize field.

Vec2f &ComponentBase::editMaxSize(void)
{
    editSField(MaxSizeFieldMask);

    return _sfMaxSize.getValue();
}

//! Get the value of the Component::_sfMaxSize field.
const Vec2f &ComponentBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}


//! Set the value of the Component::_sfMaxSize field.
void ComponentBase::setMaxSize(const Vec2f &value)
{
    editSField(MaxSizeFieldMask);

    _sfMaxSize.setValue(value);
}
//! Get the value of the Component::_sfPreferredSize field.

Vec2f &ComponentBase::editPreferredSize(void)
{
    editSField(PreferredSizeFieldMask);

    return _sfPreferredSize.getValue();
}

//! Get the value of the Component::_sfPreferredSize field.
const Vec2f &ComponentBase::getPreferredSize(void) const
{
    return _sfPreferredSize.getValue();
}


//! Set the value of the Component::_sfPreferredSize field.
void ComponentBase::setPreferredSize(const Vec2f &value)
{
    editSField(PreferredSizeFieldMask);

    _sfPreferredSize.setValue(value);
}
//! Get the value of the Component::_sfSize field.

Vec2f &ComponentBase::editSize(void)
{
    editSField(SizeFieldMask);

    return _sfSize.getValue();
}

//! Get the value of the Component::_sfSize field.
const Vec2f &ComponentBase::getSize(void) const
{
    return _sfSize.getValue();
}


//! Set the value of the Component::_sfSize field.
void ComponentBase::setSize(const Vec2f &value)
{
    editSField(SizeFieldMask);

    _sfSize.setValue(value);
}
//! Get the value of the Component::_sfState field.

BitVector &ComponentBase::editState(void)
{
    editSField(StateFieldMask);

    return _sfState.getValue();
}

//! Get the value of the Component::_sfState field.
const BitVector &ComponentBase::getState(void) const
{
    return _sfState.getValue();
}


//! Set the value of the Component::_sfState field.
void ComponentBase::setState(const BitVector &value)
{
    editSField(StateFieldMask);

    _sfState.setValue(value);
}

//! Get the value of the Component::_sfConstraints field.
LayoutConstraints * ComponentBase::getConstraints(void) const
{
    return _sfConstraints.getValue();
}

//! Set the value of the Component::_sfConstraints field.
void ComponentBase::setConstraints(LayoutConstraints * const value)
{
    editSField(ConstraintsFieldMask);

    _sfConstraints.setValue(value);
}

//! Get the value of the Component::_sfBorder field.
Border * ComponentBase::getBorder(void) const
{
    return _sfBorder.getValue();
}

//! Set the value of the Component::_sfBorder field.
void ComponentBase::setBorder(Border * const value)
{
    editSField(BorderFieldMask);

    _sfBorder.setValue(value);
}

//! Get the value of the Component::_sfBackground field.
Layer * ComponentBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the Component::_sfBackground field.
void ComponentBase::setBackground(Layer * const value)
{
    editSField(BackgroundFieldMask);

    _sfBackground.setValue(value);
}

//! Get the value of the Component::_sfDisabledBorder field.
Border * ComponentBase::getDisabledBorder(void) const
{
    return _sfDisabledBorder.getValue();
}

//! Set the value of the Component::_sfDisabledBorder field.
void ComponentBase::setDisabledBorder(Border * const value)
{
    editSField(DisabledBorderFieldMask);

    _sfDisabledBorder.setValue(value);
}

//! Get the value of the Component::_sfDisabledBackground field.
Layer * ComponentBase::getDisabledBackground(void) const
{
    return _sfDisabledBackground.getValue();
}

//! Set the value of the Component::_sfDisabledBackground field.
void ComponentBase::setDisabledBackground(Layer * const value)
{
    editSField(DisabledBackgroundFieldMask);

    _sfDisabledBackground.setValue(value);
}
//! Get the value of the Component::_sfDragEnabled field.

bool &ComponentBase::editDragEnabled(void)
{
    editSField(DragEnabledFieldMask);

    return _sfDragEnabled.getValue();
}

//! Get the value of the Component::_sfDragEnabled field.
      bool  ComponentBase::getDragEnabled(void) const
{
    return _sfDragEnabled.getValue();
}


//! Set the value of the Component::_sfDragEnabled field.
void ComponentBase::setDragEnabled(const bool value)
{
    editSField(DragEnabledFieldMask);

    _sfDragEnabled.setValue(value);
}
//! Get the value of the Component::_sfScrollTrackingCharacteristics field.

UInt16 &ComponentBase::editScrollTrackingCharacteristics(void)
{
    editSField(ScrollTrackingCharacteristicsFieldMask);

    return _sfScrollTrackingCharacteristics.getValue();
}

//! Get the value of the Component::_sfScrollTrackingCharacteristics field.
      UInt16  ComponentBase::getScrollTrackingCharacteristics(void) const
{
    return _sfScrollTrackingCharacteristics.getValue();
}


//! Set the value of the Component::_sfScrollTrackingCharacteristics field.
void ComponentBase::setScrollTrackingCharacteristics(const UInt16 value)
{
    editSField(ScrollTrackingCharacteristicsFieldMask);

    _sfScrollTrackingCharacteristics.setValue(value);
}

//! Get the value of the Component::_sfFocusedBorder field.
Border * ComponentBase::getFocusedBorder(void) const
{
    return _sfFocusedBorder.getValue();
}

//! Set the value of the Component::_sfFocusedBorder field.
void ComponentBase::setFocusedBorder(Border * const value)
{
    editSField(FocusedBorderFieldMask);

    _sfFocusedBorder.setValue(value);
}

//! Get the value of the Component::_sfFocusedBackground field.
Layer * ComponentBase::getFocusedBackground(void) const
{
    return _sfFocusedBackground.getValue();
}

//! Set the value of the Component::_sfFocusedBackground field.
void ComponentBase::setFocusedBackground(Layer * const value)
{
    editSField(FocusedBackgroundFieldMask);

    _sfFocusedBackground.setValue(value);
}

//! Get the value of the Component::_sfRolloverBorder field.
Border * ComponentBase::getRolloverBorder(void) const
{
    return _sfRolloverBorder.getValue();
}

//! Set the value of the Component::_sfRolloverBorder field.
void ComponentBase::setRolloverBorder(Border * const value)
{
    editSField(RolloverBorderFieldMask);

    _sfRolloverBorder.setValue(value);
}

//! Get the value of the Component::_sfRolloverBackground field.
Layer * ComponentBase::getRolloverBackground(void) const
{
    return _sfRolloverBackground.getValue();
}

//! Set the value of the Component::_sfRolloverBackground field.
void ComponentBase::setRolloverBackground(Layer * const value)
{
    editSField(RolloverBackgroundFieldMask);

    _sfRolloverBackground.setValue(value);
}

//! Get the value of the Component::_sfFocusedForeground field.
Layer * ComponentBase::getFocusedForeground(void) const
{
    return _sfFocusedForeground.getValue();
}

//! Set the value of the Component::_sfFocusedForeground field.
void ComponentBase::setFocusedForeground(Layer * const value)
{
    editSField(FocusedForegroundFieldMask);

    _sfFocusedForeground.setValue(value);
}

//! Get the value of the Component::_sfRolloverForeground field.
Layer * ComponentBase::getRolloverForeground(void) const
{
    return _sfRolloverForeground.getValue();
}

//! Set the value of the Component::_sfRolloverForeground field.
void ComponentBase::setRolloverForeground(Layer * const value)
{
    editSField(RolloverForegroundFieldMask);

    _sfRolloverForeground.setValue(value);
}

//! Get the value of the Component::_sfDisabledForeground field.
Layer * ComponentBase::getDisabledForeground(void) const
{
    return _sfDisabledForeground.getValue();
}

//! Set the value of the Component::_sfDisabledForeground field.
void ComponentBase::setDisabledForeground(Layer * const value)
{
    editSField(DisabledForegroundFieldMask);

    _sfDisabledForeground.setValue(value);
}

//! Get the value of the Component::_sfForeground field.
Layer * ComponentBase::getForeground(void) const
{
    return _sfForeground.getValue();
}

//! Set the value of the Component::_sfForeground field.
void ComponentBase::setForeground(Layer * const value)
{
    editSField(ForegroundFieldMask);

    _sfForeground.setValue(value);
}

//! Get the value of the Component::_sfToolTip field.
Component * ComponentBase::getToolTip(void) const
{
    return _sfToolTip.getValue();
}

//! Set the value of the Component::_sfToolTip field.
void ComponentBase::setToolTip(Component * const value)
{
    editSField(ToolTipFieldMask);

    _sfToolTip.setValue(value);
}
//! Get the value of the Component::_sfOpacity field.

Real32 &ComponentBase::editOpacity(void)
{
    editSField(OpacityFieldMask);

    return _sfOpacity.getValue();
}

//! Get the value of the Component::_sfOpacity field.
      Real32  ComponentBase::getOpacity(void) const
{
    return _sfOpacity.getValue();
}


//! Set the value of the Component::_sfOpacity field.
void ComponentBase::setOpacity(const Real32 value)
{
    editSField(OpacityFieldMask);

    _sfOpacity.setValue(value);
}

//! Get the value of the Component::_sfParentContainer field.
FieldContainer * ComponentBase::getParentContainer(void) const
{
    return _sfParentContainer.getValue();
}

//! Set the value of the Component::_sfParentContainer field.
void ComponentBase::setParentContainer(FieldContainer * const value)
{
    editSField(ParentContainerFieldMask);

    _sfParentContainer.setValue(value);
}
//! Get the value of the Component::_sfClipping field.

bool &ComponentBase::editClipping(void)
{
    editSField(ClippingFieldMask);

    return _sfClipping.getValue();
}

//! Get the value of the Component::_sfClipping field.
      bool  ComponentBase::getClipping(void) const
{
    return _sfClipping.getValue();
}


//! Set the value of the Component::_sfClipping field.
void ComponentBase::setClipping(const bool value)
{
    editSField(ClippingFieldMask);

    _sfClipping.setValue(value);
}

//! Get the value of the Component::_sfPopupMenu field.
PopupMenu * ComponentBase::getPopupMenu(void) const
{
    return _sfPopupMenu.getValue();
}

//! Set the value of the Component::_sfPopupMenu field.
void ComponentBase::setPopupMenu(PopupMenu * const value)
{
    editSField(PopupMenuFieldMask);

    _sfPopupMenu.setValue(value);
}
//! Get the value of the Component::_sfCursor field.

UInt32 &ComponentBase::editCursor(void)
{
    editSField(CursorFieldMask);

    return _sfCursor.getValue();
}

//! Get the value of the Component::_sfCursor field.
      UInt32  ComponentBase::getCursor(void) const
{
    return _sfCursor.getValue();
}


//! Set the value of the Component::_sfCursor field.
void ComponentBase::setCursor(const UInt32 value)
{
    editSField(CursorFieldMask);

    _sfCursor.setValue(value);
}

//! Get the value of the Component::_sfEventSource field.
ComponentEventSource * ComponentBase::getEventSource(void) const
{
    return _sfEventSource.getValue();
}

//! Set the value of the Component::_sfEventSource field.
void ComponentBase::setEventSource(ComponentEventSource * const value)
{
    editSField(EventSourceFieldMask);

    _sfEventSource.setValue(value);
}


OSG_END_NAMESPACE
