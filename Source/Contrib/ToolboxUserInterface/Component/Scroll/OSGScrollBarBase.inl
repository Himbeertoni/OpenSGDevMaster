/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ScrollBar!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &ScrollBarBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ScrollBarBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ScrollBarBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ScrollBar::_sfOrientation field.

inline
UInt32 &ScrollBarBase::editOrientation(void)
{
    editSField(OrientationFieldMask);

    return _sfOrientation.getValue();
}

//! Get the value of the ScrollBar::_sfOrientation field.
inline
      UInt32  ScrollBarBase::getOrientation(void) const
{
    return _sfOrientation.getValue();
}

//! Set the value of the ScrollBar::_sfOrientation field.
inline
void ScrollBarBase::setOrientation(const UInt32 value)
{
    editSField(OrientationFieldMask);

    _sfOrientation.setValue(value);
}
//! Get the value of the ScrollBar::_sfUnitIncrement field.

inline
UInt32 &ScrollBarBase::editUnitIncrement(void)
{
    editSField(UnitIncrementFieldMask);

    return _sfUnitIncrement.getValue();
}

//! Get the value of the ScrollBar::_sfUnitIncrement field.
inline
      UInt32  ScrollBarBase::getUnitIncrement(void) const
{
    return _sfUnitIncrement.getValue();
}

//! Set the value of the ScrollBar::_sfUnitIncrement field.
inline
void ScrollBarBase::setUnitIncrement(const UInt32 value)
{
    editSField(UnitIncrementFieldMask);

    _sfUnitIncrement.setValue(value);
}
//! Get the value of the ScrollBar::_sfBlockIncrement field.

inline
UInt32 &ScrollBarBase::editBlockIncrement(void)
{
    editSField(BlockIncrementFieldMask);

    return _sfBlockIncrement.getValue();
}

//! Get the value of the ScrollBar::_sfBlockIncrement field.
inline
      UInt32  ScrollBarBase::getBlockIncrement(void) const
{
    return _sfBlockIncrement.getValue();
}

//! Set the value of the ScrollBar::_sfBlockIncrement field.
inline
void ScrollBarBase::setBlockIncrement(const UInt32 value)
{
    editSField(BlockIncrementFieldMask);

    _sfBlockIncrement.setValue(value);
}
//! Get the value of the ScrollBar::_sfScrollBarMinLength field.

inline
UInt32 &ScrollBarBase::editScrollBarMinLength(void)
{
    editSField(ScrollBarMinLengthFieldMask);

    return _sfScrollBarMinLength.getValue();
}

//! Get the value of the ScrollBar::_sfScrollBarMinLength field.
inline
      UInt32  ScrollBarBase::getScrollBarMinLength(void) const
{
    return _sfScrollBarMinLength.getValue();
}

//! Set the value of the ScrollBar::_sfScrollBarMinLength field.
inline
void ScrollBarBase::setScrollBarMinLength(const UInt32 value)
{
    editSField(ScrollBarMinLengthFieldMask);

    _sfScrollBarMinLength.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ScrollBarBase::execSync (      ScrollBarBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pFrom->_sfOrientation);

    if(FieldBits::NoField != (UnitIncrementFieldMask & whichField))
        _sfUnitIncrement.syncWith(pFrom->_sfUnitIncrement);

    if(FieldBits::NoField != (BlockIncrementFieldMask & whichField))
        _sfBlockIncrement.syncWith(pFrom->_sfBlockIncrement);

    if(FieldBits::NoField != (VerticalMinButtonFieldMask & whichField))
        _sfVerticalMinButton.syncWith(pFrom->_sfVerticalMinButton);

    if(FieldBits::NoField != (VerticalMaxButtonFieldMask & whichField))
        _sfVerticalMaxButton.syncWith(pFrom->_sfVerticalMaxButton);

    if(FieldBits::NoField != (VerticalScrollBarFieldMask & whichField))
        _sfVerticalScrollBar.syncWith(pFrom->_sfVerticalScrollBar);

    if(FieldBits::NoField != (VerticalScrollFieldFieldMask & whichField))
        _sfVerticalScrollField.syncWith(pFrom->_sfVerticalScrollField);

    if(FieldBits::NoField != (HorizontalMinButtonFieldMask & whichField))
        _sfHorizontalMinButton.syncWith(pFrom->_sfHorizontalMinButton);

    if(FieldBits::NoField != (HorizontalMaxButtonFieldMask & whichField))
        _sfHorizontalMaxButton.syncWith(pFrom->_sfHorizontalMaxButton);

    if(FieldBits::NoField != (HorizontalScrollBarFieldMask & whichField))
        _sfHorizontalScrollBar.syncWith(pFrom->_sfHorizontalScrollBar);

    if(FieldBits::NoField != (HorizontalScrollFieldFieldMask & whichField))
        _sfHorizontalScrollField.syncWith(pFrom->_sfHorizontalScrollField);

    if(FieldBits::NoField != (ScrollBarMinLengthFieldMask & whichField))
        _sfScrollBarMinLength.syncWith(pFrom->_sfScrollBarMinLength);

    if(FieldBits::NoField != (RangeModelFieldMask & whichField))
        _sfRangeModel.syncWith(pFrom->_sfRangeModel);
}
#endif


inline
const Char8 *ScrollBarBase::getClassname(void)
{
    return "ScrollBar";
}
OSG_GEN_CONTAINERPTR(ScrollBar);

OSG_END_NAMESPACE

