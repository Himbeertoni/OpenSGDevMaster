/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGWindowEventProducerEventSource.h" // EventSource Class

#include "OSGWindowEventProducerBase.h"
#include "OSGWindowEventProducer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WindowEventProducer
    WindowEventProducer contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            WindowEventProducerBase::_sfEnabled
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForDraw
    
*/

/*! \var bool            WindowEventProducerBase::_sfUseCallbackForReshape
    
*/

/*! \var Time            WindowEventProducerBase::_sfLastUpdateTime
    
*/

/*! \var bool            WindowEventProducerBase::_sfLockCursor
    
*/

/*! \var WindowEventProducerEventSource * WindowEventProducerBase::_sfEventSource
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<WindowEventProducer *, nsOSG>::_type(
    "WindowEventProducerPtr", 
    "WindowPtr", 
    WindowEventProducer::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(WindowEventProducer *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WindowEventProducer *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WindowEventProducer *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowEventProducerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Enabled",
        "",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForDraw",
        "",
        UseCallbackForDrawFieldId, UseCallbackForDrawFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForDraw),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForDraw));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "UseCallbackForReshape",
        "",
        UseCallbackForReshapeFieldId, UseCallbackForReshapeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleUseCallbackForReshape),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleUseCallbackForReshape));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "LastUpdateTime",
        "",
        LastUpdateTimeFieldId, LastUpdateTimeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLastUpdateTime),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLastUpdateTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "LockCursor",
        "",
        LockCursorFieldId, LockCursorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleLockCursor),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleLockCursor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecWindowEventProducerEventSourcePtr::Description(
        SFUnrecWindowEventProducerEventSourcePtr::getClassType(),
        "EventSource",
        "",
        EventSourceFieldId, EventSourceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&WindowEventProducer::editHandleEventSource),
        static_cast<FieldGetMethodSig >(&WindowEventProducer::getHandleEventSource));

    oType.addInitialDesc(pDesc);
}


WindowEventProducerBase::TypeObject WindowEventProducerBase::_type(
    WindowEventProducerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    WindowEventProducer::initMethod,
    WindowEventProducer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&WindowEventProducer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"WindowEventProducer\"\n"
    "    parent=\"Window\"\n"
    "    library=\"ContribToolboxWindow\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    ">\n"
    "WindowEventProducer contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    "    <Field\n"
    "        name=\"Enabled\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"UseCallbackForDraw\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"UseCallbackForReshape\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LastUpdateTime\"\n"
    "        type=\"Time\"\n"
    "        cardinality=\"single\"\n"
    "        category=\"data\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"-1.0\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"LockCursor\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"EventSource\"\n"
    "        type=\"WindowEventProducerEventSource\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "    >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "WindowEventProducer contains code for Window Manipulation: Position, size, iconify, enable, visible, fullscreen, etc.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowEventProducerBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowEventProducerBase::getType(void) const
{
    return _type;
}

UInt32 WindowEventProducerBase::getContainerSize(void) const
{
    return sizeof(WindowEventProducer);
}

/*------------------------- decorator get ------------------------------*/


SFBool *WindowEventProducerBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *WindowEventProducerBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForDraw(void)
{
    editSField(UseCallbackForDrawFieldMask);

    return &_sfUseCallbackForDraw;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForDraw(void) const
{
    return &_sfUseCallbackForDraw;
}


SFBool *WindowEventProducerBase::editSFUseCallbackForReshape(void)
{
    editSField(UseCallbackForReshapeFieldMask);

    return &_sfUseCallbackForReshape;
}

const SFBool *WindowEventProducerBase::getSFUseCallbackForReshape(void) const
{
    return &_sfUseCallbackForReshape;
}


SFTime *WindowEventProducerBase::editSFLastUpdateTime(void)
{
    editSField(LastUpdateTimeFieldMask);

    return &_sfLastUpdateTime;
}

const SFTime *WindowEventProducerBase::getSFLastUpdateTime(void) const
{
    return &_sfLastUpdateTime;
}


SFBool *WindowEventProducerBase::editSFLockCursor(void)
{
    editSField(LockCursorFieldMask);

    return &_sfLockCursor;
}

const SFBool *WindowEventProducerBase::getSFLockCursor(void) const
{
    return &_sfLockCursor;
}


//! Get the WindowEventProducer::_sfEventSource field.
const SFUnrecWindowEventProducerEventSourcePtr *WindowEventProducerBase::getSFEventSource(void) const
{
    return &_sfEventSource;
}

SFUnrecWindowEventProducerEventSourcePtr *WindowEventProducerBase::editSFEventSource    (void)
{
    editSField(EventSourceFieldMask);

    return &_sfEventSource;
}





/*------------------------------ access -----------------------------------*/

SizeT WindowEventProducerBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForDraw.getBinSize();
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        returnValue += _sfUseCallbackForReshape.getBinSize();
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        returnValue += _sfLastUpdateTime.getBinSize();
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        returnValue += _sfLockCursor.getBinSize();
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        returnValue += _sfEventSource.getBinSize();
    }

    return returnValue;
}

void WindowEventProducerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        _sfUseCallbackForDraw.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        _sfUseCallbackForReshape.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        _sfLastUpdateTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        _sfLockCursor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        _sfEventSource.copyToBin(pMem);
    }
}

void WindowEventProducerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        editSField(EnabledFieldMask);
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForDrawFieldMask & whichField))
    {
        editSField(UseCallbackForDrawFieldMask);
        _sfUseCallbackForDraw.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseCallbackForReshapeFieldMask & whichField))
    {
        editSField(UseCallbackForReshapeFieldMask);
        _sfUseCallbackForReshape.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastUpdateTimeFieldMask & whichField))
    {
        editSField(LastUpdateTimeFieldMask);
        _sfLastUpdateTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LockCursorFieldMask & whichField))
    {
        editSField(LockCursorFieldMask);
        _sfLockCursor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventSourceFieldMask & whichField))
    {
        editSField(EventSourceFieldMask);
        _sfEventSource.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

WindowEventProducerBase::WindowEventProducerBase(void) :
    Inherited(),
    _sfEnabled                (),
    _sfUseCallbackForDraw     (bool(false)),
    _sfUseCallbackForReshape  (bool(false)),
    _sfLastUpdateTime         (Time(-1.0)),
    _sfLockCursor             (bool(false)),
    _sfEventSource            (NULL)
{
}

WindowEventProducerBase::WindowEventProducerBase(const WindowEventProducerBase &source) :
    Inherited(source),
    _sfEnabled                (source._sfEnabled                ),
    _sfUseCallbackForDraw     (source._sfUseCallbackForDraw     ),
    _sfUseCallbackForReshape  (source._sfUseCallbackForReshape  ),
    _sfLastUpdateTime         (source._sfLastUpdateTime         ),
    _sfLockCursor             (source._sfLockCursor             ),
    _sfEventSource            (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

WindowEventProducerBase::~WindowEventProducerBase(void)
{
}

void WindowEventProducerBase::onCreate(const WindowEventProducer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        WindowEventProducer *pThis = static_cast<WindowEventProducer *>(this);

        pThis->setEventSource(source->getEventSource());
    }
}

GetFieldHandlePtr WindowEventProducerBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForDraw (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForDraw(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForDraw,
             this->getType().getFieldDesc(UseCallbackForDrawFieldId),
             this));


    editSField(UseCallbackForDrawFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleUseCallbackForReshape (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleUseCallbackForReshape(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseCallbackForReshape,
             this->getType().getFieldDesc(UseCallbackForReshapeFieldId),
             this));


    editSField(UseCallbackForReshapeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLastUpdateTime  (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLastUpdateTime (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfLastUpdateTime,
             this->getType().getFieldDesc(LastUpdateTimeFieldId),
             this));


    editSField(LastUpdateTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleLockCursor      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleLockCursor     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLockCursor,
             this->getType().getFieldDesc(LockCursorFieldId),
             this));


    editSField(LockCursorFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowEventProducerBase::getHandleEventSource     (void) const
{
    SFUnrecWindowEventProducerEventSourcePtr::GetHandlePtr returnValue(
        new  SFUnrecWindowEventProducerEventSourcePtr::GetHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             const_cast<WindowEventProducerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowEventProducerBase::editHandleEventSource    (void)
{
    SFUnrecWindowEventProducerEventSourcePtr::EditHandlePtr returnValue(
        new  SFUnrecWindowEventProducerEventSourcePtr::EditHandle(
             &_sfEventSource,
             this->getType().getFieldDesc(EventSourceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&WindowEventProducer::setEventSource,
                    static_cast<WindowEventProducer *>(this), _1));

    editSField(EventSourceFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WindowEventProducerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WindowEventProducer *pThis = static_cast<WindowEventProducer *>(this);

    pThis->execSync(static_cast<WindowEventProducer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void WindowEventProducerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<WindowEventProducer *>(this)->setEventSource(NULL);


}


OSG_END_NAMESPACE
