/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducerEventSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &WindowEventProducerEventSourceBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 WindowEventProducerEventSourceBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &WindowEventProducerEventSourceBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 WindowEventProducerEventSourceBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}
inline
OSG::UInt16 WindowEventProducerEventSourceBase::getClassGroupId(void)
{
    return _type.getGroupId();
}


inline
UInt32 WindowEventProducerEventSourceBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *WindowEventProducerEventSourceBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *WindowEventProducerEventSourceBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 WindowEventProducerEventSourceBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowOpened(const WindowOpenedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowOpenedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowOpened(const WindowOpenedEventType::group_type &group,
                                                    const WindowOpenedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowOpenedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowOpened(const WindowOpenedEventType::group_type &group)
{
    _WindowOpenedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowOpened(void)
{
    _WindowOpenedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowOpened(void) const
{
    return _WindowOpenedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowOpened(void) const
{
    return _WindowOpenedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowOpened(WindowOpenedEventDetailsType* const e)
{
    produceEvent(WindowOpenedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowClosing(const WindowClosingEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowClosingEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowClosing(const WindowClosingEventType::group_type &group,
                                                    const WindowClosingEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowClosingEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowClosing(const WindowClosingEventType::group_type &group)
{
    _WindowClosingEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowClosing(void)
{
    _WindowClosingEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowClosing(void) const
{
    return _WindowClosingEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowClosing(void) const
{
    return _WindowClosingEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowClosing(WindowClosingEventDetailsType* const e)
{
    produceEvent(WindowClosingEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowClosed(const WindowClosedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowClosedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowClosed(const WindowClosedEventType::group_type &group,
                                                    const WindowClosedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowClosedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowClosed(const WindowClosedEventType::group_type &group)
{
    _WindowClosedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowClosed(void)
{
    _WindowClosedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowClosed(void) const
{
    return _WindowClosedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowClosed(void) const
{
    return _WindowClosedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowClosed(WindowClosedEventDetailsType* const e)
{
    produceEvent(WindowClosedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowIconified(const WindowIconifiedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowIconifiedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowIconified(const WindowIconifiedEventType::group_type &group,
                                                    const WindowIconifiedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowIconifiedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowIconified(const WindowIconifiedEventType::group_type &group)
{
    _WindowIconifiedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowIconified(void)
{
    _WindowIconifiedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowIconified(void) const
{
    return _WindowIconifiedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowIconified(void) const
{
    return _WindowIconifiedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowIconified(WindowIconifiedEventDetailsType* const e)
{
    produceEvent(WindowIconifiedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowDeiconified(const WindowDeiconifiedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowDeiconifiedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowDeiconified(const WindowDeiconifiedEventType::group_type &group,
                                                    const WindowDeiconifiedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowDeiconifiedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowDeiconified(const WindowDeiconifiedEventType::group_type &group)
{
    _WindowDeiconifiedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowDeiconified(void)
{
    _WindowDeiconifiedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowDeiconified(void) const
{
    return _WindowDeiconifiedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowDeiconified(void) const
{
    return _WindowDeiconifiedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowDeiconified(WindowDeiconifiedEventDetailsType* const e)
{
    produceEvent(WindowDeiconifiedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowActivated(const WindowActivatedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowActivatedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowActivated(const WindowActivatedEventType::group_type &group,
                                                    const WindowActivatedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowActivatedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowActivated(const WindowActivatedEventType::group_type &group)
{
    _WindowActivatedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowActivated(void)
{
    _WindowActivatedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowActivated(void) const
{
    return _WindowActivatedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowActivated(void) const
{
    return _WindowActivatedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowActivated(WindowActivatedEventDetailsType* const e)
{
    produceEvent(WindowActivatedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowDeactivated(const WindowDeactivatedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowDeactivatedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowDeactivated(const WindowDeactivatedEventType::group_type &group,
                                                    const WindowDeactivatedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowDeactivatedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowDeactivated(const WindowDeactivatedEventType::group_type &group)
{
    _WindowDeactivatedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowDeactivated(void)
{
    _WindowDeactivatedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowDeactivated(void) const
{
    return _WindowDeactivatedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowDeactivated(void) const
{
    return _WindowDeactivatedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowDeactivated(WindowDeactivatedEventDetailsType* const e)
{
    produceEvent(WindowDeactivatedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowEntered(const WindowEnteredEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowEnteredEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowEntered(const WindowEnteredEventType::group_type &group,
                                                    const WindowEnteredEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowEnteredEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowEntered(const WindowEnteredEventType::group_type &group)
{
    _WindowEnteredEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowEntered(void)
{
    _WindowEnteredEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowEntered(void) const
{
    return _WindowEnteredEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowEntered(void) const
{
    return _WindowEnteredEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowEntered(WindowEnteredEventDetailsType* const e)
{
    produceEvent(WindowEnteredEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowExited(const WindowExitedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _WindowExitedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectWindowExited(const WindowExitedEventType::group_type &group,
                                                    const WindowExitedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _WindowExitedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectWindowExited(const WindowExitedEventType::group_type &group)
{
    _WindowExitedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsWindowExited(void)
{
    _WindowExitedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyWindowExited(void) const
{
    return _WindowExitedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsWindowExited(void) const
{
    return _WindowExitedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceWindowExited(WindowExitedEventDetailsType* const e)
{
    produceEvent(WindowExitedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseClicked(const MouseClickedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseClickedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseClicked(const MouseClickedEventType::group_type &group,
                                                    const MouseClickedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseClickedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseClicked(const MouseClickedEventType::group_type &group)
{
    _MouseClickedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseClicked(void)
{
    _MouseClickedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseClicked(void) const
{
    return _MouseClickedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseClicked(void) const
{
    return _MouseClickedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseClicked(MouseClickedEventDetailsType* const e)
{
    produceEvent(MouseClickedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseEntered(const MouseEnteredEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseEnteredEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseEntered(const MouseEnteredEventType::group_type &group,
                                                    const MouseEnteredEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseEnteredEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseEntered(const MouseEnteredEventType::group_type &group)
{
    _MouseEnteredEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseEntered(void)
{
    _MouseEnteredEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseEntered(void) const
{
    return _MouseEnteredEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseEntered(void) const
{
    return _MouseEnteredEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseEntered(MouseEnteredEventDetailsType* const e)
{
    produceEvent(MouseEnteredEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseExited(const MouseExitedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseExitedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseExited(const MouseExitedEventType::group_type &group,
                                                    const MouseExitedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseExitedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseExited(const MouseExitedEventType::group_type &group)
{
    _MouseExitedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseExited(void)
{
    _MouseExitedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseExited(void) const
{
    return _MouseExitedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseExited(void) const
{
    return _MouseExitedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseExited(MouseExitedEventDetailsType* const e)
{
    produceEvent(MouseExitedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMousePressed(const MousePressedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MousePressedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMousePressed(const MousePressedEventType::group_type &group,
                                                    const MousePressedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MousePressedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMousePressed(const MousePressedEventType::group_type &group)
{
    _MousePressedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMousePressed(void)
{
    _MousePressedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMousePressed(void) const
{
    return _MousePressedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMousePressed(void) const
{
    return _MousePressedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMousePressed(MousePressedEventDetailsType* const e)
{
    produceEvent(MousePressedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseReleased(const MouseReleasedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseReleasedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseReleased(const MouseReleasedEventType::group_type &group,
                                                    const MouseReleasedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseReleasedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseReleased(const MouseReleasedEventType::group_type &group)
{
    _MouseReleasedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseReleased(void)
{
    _MouseReleasedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseReleased(void) const
{
    return _MouseReleasedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseReleased(void) const
{
    return _MouseReleasedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseReleased(MouseReleasedEventDetailsType* const e)
{
    produceEvent(MouseReleasedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseMoved(const MouseMovedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseMovedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseMoved(const MouseMovedEventType::group_type &group,
                                                    const MouseMovedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseMovedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseMoved(const MouseMovedEventType::group_type &group)
{
    _MouseMovedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseMoved(void)
{
    _MouseMovedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseMoved(void) const
{
    return _MouseMovedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseMoved(void) const
{
    return _MouseMovedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseMoved(MouseMovedEventDetailsType* const e)
{
    produceEvent(MouseMovedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseDragged(const MouseDraggedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseDraggedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseDragged(const MouseDraggedEventType::group_type &group,
                                                    const MouseDraggedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseDraggedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseDragged(const MouseDraggedEventType::group_type &group)
{
    _MouseDraggedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseDragged(void)
{
    _MouseDraggedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseDragged(void) const
{
    return _MouseDraggedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseDragged(void) const
{
    return _MouseDraggedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseDragged(MouseDraggedEventDetailsType* const e)
{
    produceEvent(MouseDraggedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseWheelMoved(const MouseWheelMovedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _MouseWheelMovedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectMouseWheelMoved(const MouseWheelMovedEventType::group_type &group,
                                                    const MouseWheelMovedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _MouseWheelMovedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectMouseWheelMoved(const MouseWheelMovedEventType::group_type &group)
{
    _MouseWheelMovedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsMouseWheelMoved(void)
{
    _MouseWheelMovedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyMouseWheelMoved(void) const
{
    return _MouseWheelMovedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsMouseWheelMoved(void) const
{
    return _MouseWheelMovedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceMouseWheelMoved(MouseWheelMovedEventDetailsType* const e)
{
    produceEvent(MouseWheelMovedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyPressed(const KeyPressedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _KeyPressedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyPressed(const KeyPressedEventType::group_type &group,
                                                    const KeyPressedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _KeyPressedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectKeyPressed(const KeyPressedEventType::group_type &group)
{
    _KeyPressedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsKeyPressed(void)
{
    _KeyPressedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyKeyPressed(void) const
{
    return _KeyPressedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsKeyPressed(void) const
{
    return _KeyPressedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceKeyPressed(KeyPressedEventDetailsType* const e)
{
    produceEvent(KeyPressedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyReleased(const KeyReleasedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _KeyReleasedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyReleased(const KeyReleasedEventType::group_type &group,
                                                    const KeyReleasedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _KeyReleasedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectKeyReleased(const KeyReleasedEventType::group_type &group)
{
    _KeyReleasedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsKeyReleased(void)
{
    _KeyReleasedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyKeyReleased(void) const
{
    return _KeyReleasedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsKeyReleased(void) const
{
    return _KeyReleasedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceKeyReleased(KeyReleasedEventDetailsType* const e)
{
    produceEvent(KeyReleasedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyTyped(const KeyTypedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _KeyTypedEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectKeyTyped(const KeyTypedEventType::group_type &group,
                                                    const KeyTypedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _KeyTypedEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectKeyTyped(const KeyTypedEventType::group_type &group)
{
    _KeyTypedEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsKeyTyped(void)
{
    _KeyTypedEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyKeyTyped(void) const
{
    return _KeyTypedEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsKeyTyped(void) const
{
    return _KeyTypedEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceKeyTyped(KeyTypedEventDetailsType* const e)
{
    produceEvent(KeyTypedEventId, e);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectUpdate(const UpdateEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _UpdateEvent.connect(listener, at);
}

inline
boost::signals2::connection  WindowEventProducerEventSourceBase::connectUpdate(const UpdateEventType::group_type &group,
                                                    const UpdateEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _UpdateEvent.connect(group, listener, at);
}

inline
void  WindowEventProducerEventSourceBase::disconnectUpdate(const UpdateEventType::group_type &group)
{
    _UpdateEvent.disconnect(group);
}

inline
void  WindowEventProducerEventSourceBase::disconnectAllSlotsUpdate(void)
{
    _UpdateEvent.disconnect_all_slots();
}

inline
bool  WindowEventProducerEventSourceBase::isEmptyUpdate(void) const
{
    return _UpdateEvent.empty();
}

inline
UInt32  WindowEventProducerEventSourceBase::numSlotsUpdate(void) const
{
    return _UpdateEvent.num_slots();
}

inline
void WindowEventProducerEventSourceBase::produceUpdate(UpdateEventDetailsType* const e)
{
    produceEvent(UpdateEventId, e);
}

/*------------------------------ get -----------------------------------*/



#ifdef OSG_MT_CPTR_ASPECT
inline
void WindowEventProducerEventSourceBase::execSync (      WindowEventProducerEventSourceBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);
}
#endif


inline
const Char8 *WindowEventProducerEventSourceBase::getClassname(void)
{
    return "WindowEventProducerEventSource";
}
OSG_GEN_CONTAINERPTR(WindowEventProducerEventSource);

OSG_END_NAMESPACE

