/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WindowEventProducerEventSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"




#include "OSGWindowEventProducerEventSourceBase.h"
#include "OSGWindowEventProducerEventSource.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WindowEventProducerEventSource
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<WindowEventProducerEventSource *, nsOSG>::_type(
    "WindowEventProducerEventSourcePtr", 
    "EventContainerPtr", 
    WindowEventProducerEventSource::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(WindowEventProducerEventSource *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WindowEventProducerEventSource *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WindowEventProducerEventSource *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowEventProducerEventSourceBase::classDescInserter(TypeObject &oType)
{
}


WindowEventProducerEventSourceBase::TypeObject WindowEventProducerEventSourceBase::_type(
    WindowEventProducerEventSourceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&WindowEventProducerEventSourceBase::createEmptyLocal),
    WindowEventProducerEventSource::initMethod,
    WindowEventProducerEventSource::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&WindowEventProducerEventSource::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"WindowEventProducerEventSource\"\n"
    "    parent=\"EventContainer\"\n"
    "    library=\"ContribToolboxWindow\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    ">\n"
    "<!--\n"
    "    <ProducedEvent\n"
    "        name=\"WindowOpened\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has opened.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowClosing\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has received a close command, but has not yet closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowClosed\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowIconified\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowDeiconified\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowActivated\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowDeactivated\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when this window has closed.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowEntered\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the cursor has entered this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"WindowExited\"\n"
    "        detailsType=\"WindowEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the cursor has exited this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseClicked\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when there is a mouse button click in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseEntered\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the cursor has entered this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseExited\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the cursor has exited this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MousePressed\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when there is a mouse button press in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseReleased\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when there is a mouse button release in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseMoved\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the mouse has moved in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseDragged\"\n"
    "        detailsType=\"MouseEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the mouse has moved, and one or more of the mouse buttons are down in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"MouseWheelMoved\"\n"
    "        detailsType=\"MouseWheelEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the mouse wheel has moved in this window.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyPressed\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the a key has been pressed when this window has focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyReleased\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the a key has been released when this window has focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"KeyTyped\"\n"
    "        detailsType=\"KeyEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired when the a key has been typed when this window has focus.\n"
    "    </ProducedEvent>\n"
    "    <ProducedEvent\n"
    "        name=\"Update\"\n"
    "        detailsType=\"UpdateEventDetails\"\n"
    "        consumable=\"true\"\n"
    "    >\n"
    "    This Event is fired by the main loop of this window whenever it is idle.\n"
    "    </ProducedEvent>\n"
    "-->\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowEventProducerEventSourceBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowEventProducerEventSourceBase::getType(void) const
{
    return _type;
}

UInt32 WindowEventProducerEventSourceBase::getContainerSize(void) const
{
    return sizeof(WindowEventProducerEventSource);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

SizeT WindowEventProducerEventSourceBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void WindowEventProducerEventSourceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void WindowEventProducerEventSourceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create a new instance of the class
WindowEventProducerEventSourceTransitPtr WindowEventProducerEventSourceBase::createLocal(BitVector bFlags)
{
    WindowEventProducerEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<WindowEventProducerEventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
WindowEventProducerEventSourceTransitPtr WindowEventProducerEventSourceBase::createDependent(BitVector bFlags)
{
    WindowEventProducerEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<WindowEventProducerEventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
WindowEventProducerEventSourceTransitPtr WindowEventProducerEventSourceBase::create(void)
{
    WindowEventProducerEventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<WindowEventProducerEventSource>(tmpPtr);
    }

    return fc;
}

WindowEventProducerEventSource *WindowEventProducerEventSourceBase::createEmptyLocal(BitVector bFlags)
{
    WindowEventProducerEventSource *returnValue;

    newPtr<WindowEventProducerEventSource>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
WindowEventProducerEventSource *WindowEventProducerEventSourceBase::createEmpty(void)
{
    WindowEventProducerEventSource *returnValue;

    newPtr<WindowEventProducerEventSource>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr WindowEventProducerEventSourceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    WindowEventProducerEventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WindowEventProducerEventSource *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr WindowEventProducerEventSourceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    WindowEventProducerEventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WindowEventProducerEventSource *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr WindowEventProducerEventSourceBase::shallowCopy(void) const
{
    WindowEventProducerEventSource *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const WindowEventProducerEventSource *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

WindowEventProducerEventSourceBase::WindowEventProducerEventSourceBase(void) :
    Inherited()
{
}

WindowEventProducerEventSourceBase::WindowEventProducerEventSourceBase(const WindowEventProducerEventSourceBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

WindowEventProducerEventSourceBase::~WindowEventProducerEventSourceBase(void)
{
}



#ifdef OSG_MT_CPTR_ASPECT
void WindowEventProducerEventSourceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WindowEventProducerEventSource *pThis = static_cast<WindowEventProducerEventSource *>(this);

    pThis->execSync(static_cast<WindowEventProducerEventSource *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *WindowEventProducerEventSourceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    WindowEventProducerEventSource *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const WindowEventProducerEventSource *>(pRefAspect),
                  dynamic_cast<const WindowEventProducerEventSource *>(this));

    return returnValue;
}
#endif

void WindowEventProducerEventSourceBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
