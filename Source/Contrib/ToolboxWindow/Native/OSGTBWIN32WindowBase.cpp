/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TBWIN32Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGTBWIN32WindowHelper.h"     // ActualWindow Class

#include "OSGTBWIN32WindowBase.h"
#include "OSGTBWIN32Window.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TBWIN32Window
    The class for TBWIN32 windows.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TBWIN32WindowHelper * TBWIN32WindowBase::_sfActualWindow
    
*/

/*! \var HWND            TBWIN32WindowBase::_sfHwnd
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TBWIN32Window *, nsOSG>::_type(
    "TBWIN32WindowPtr", 
    "WindowEventProducerPtr", 
    TBWIN32Window::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TBWIN32Window *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TBWIN32Window *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TBWIN32Window *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TBWIN32WindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTBWIN32WindowHelperPtr::Description(
        SFUnrecTBWIN32WindowHelperPtr::getClassType(),
        "ActualWindow",
        "",
        ActualWindowFieldId, ActualWindowFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TBWIN32Window::editHandleActualWindow),
        static_cast<FieldGetMethodSig >(&TBWIN32Window::getHandleActualWindow));

    oType.addInitialDesc(pDesc);

    pDesc = new SFHWND::Description(
        SFHWND::getClassType(),
        "hwnd",
        "",
        HwndFieldId, HwndFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TBWIN32Window::editHandleHwnd),
        static_cast<FieldGetMethodSig >(&TBWIN32Window::getHandleHwnd));

    oType.addInitialDesc(pDesc);
}


TBWIN32WindowBase::TypeObject TBWIN32WindowBase::_type(
    TBWIN32WindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TBWIN32WindowBase::createEmptyLocal),
    TBWIN32Window::initMethod,
    TBWIN32Window::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TBWIN32Window::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TBWIN32Window\"\n"
    "    parent=\"WindowEventProducer\"\n"
    "    library=\"Window\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    docGroupBase=\"GrpWindowWIN32\"\n"
    "    >\n"
    "    The class for TBWIN32 windows.\n"
    "    <Field\n"
    "        name=\"ActualWindow\"\n"
    "        type=\"TBWIN32WindowHelperPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "\t\tfieldHeader=\"OSGTBWIN32WindowHelperFields.h\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"hwnd\"\n"
    "        type=\"HWND\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldHeader=\"OSGWIN32WindowDataFields.h\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\t\n"
    "</FieldContainer>\n",
    "The class for TBWIN32 windows.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TBWIN32WindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &TBWIN32WindowBase::getType(void) const
{
    return _type;
}

UInt32 TBWIN32WindowBase::getContainerSize(void) const
{
    return sizeof(TBWIN32Window);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TBWIN32Window::_sfActualWindow field.
const SFUnrecTBWIN32WindowHelperPtr *TBWIN32WindowBase::getSFActualWindow(void) const
{
    return &_sfActualWindow;
}

SFUnrecTBWIN32WindowHelperPtr *TBWIN32WindowBase::editSFActualWindow   (void)
{
    editSField(ActualWindowFieldMask);

    return &_sfActualWindow;
}

SFHWND *TBWIN32WindowBase::editSFHwnd(void)
{
    editSField(HwndFieldMask);

    return &_sfHwnd;
}

const SFHWND *TBWIN32WindowBase::getSFHwnd(void) const
{
    return &_sfHwnd;
}






/*------------------------------ access -----------------------------------*/

SizeT TBWIN32WindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ActualWindowFieldMask & whichField))
    {
        returnValue += _sfActualWindow.getBinSize();
    }
    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        returnValue += _sfHwnd.getBinSize();
    }

    return returnValue;
}

void TBWIN32WindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ActualWindowFieldMask & whichField))
    {
        _sfActualWindow.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        _sfHwnd.copyToBin(pMem);
    }
}

void TBWIN32WindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ActualWindowFieldMask & whichField))
    {
        editSField(ActualWindowFieldMask);
        _sfActualWindow.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        editSField(HwndFieldMask);
        _sfHwnd.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TBWIN32WindowTransitPtr TBWIN32WindowBase::createLocal(BitVector bFlags)
{
    TBWIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TBWIN32Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TBWIN32WindowTransitPtr TBWIN32WindowBase::createDependent(BitVector bFlags)
{
    TBWIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TBWIN32Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TBWIN32WindowTransitPtr TBWIN32WindowBase::create(void)
{
    TBWIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TBWIN32Window>(tmpPtr);
    }

    return fc;
}

TBWIN32Window *TBWIN32WindowBase::createEmptyLocal(BitVector bFlags)
{
    TBWIN32Window *returnValue;

    newPtr<TBWIN32Window>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TBWIN32Window *TBWIN32WindowBase::createEmpty(void)
{
    TBWIN32Window *returnValue;

    newPtr<TBWIN32Window>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TBWIN32WindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TBWIN32Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TBWIN32Window *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TBWIN32WindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TBWIN32Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TBWIN32Window *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TBWIN32WindowBase::shallowCopy(void) const
{
    TBWIN32Window *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TBWIN32Window *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TBWIN32WindowBase::TBWIN32WindowBase(void) :
    Inherited(),
    _sfActualWindow           (NULL),
    _sfHwnd                   (HWND(0))
{
}

TBWIN32WindowBase::TBWIN32WindowBase(const TBWIN32WindowBase &source) :
    Inherited(source),
    _sfActualWindow           (NULL),
    _sfHwnd                   (source._sfHwnd                   )
{
}


/*-------------------------- destructors ----------------------------------*/

TBWIN32WindowBase::~TBWIN32WindowBase(void)
{
}

void TBWIN32WindowBase::onCreate(const TBWIN32Window *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TBWIN32Window *pThis = static_cast<TBWIN32Window *>(this);

        pThis->setActualWindow(source->getActualWindow());
    }
}

GetFieldHandlePtr TBWIN32WindowBase::getHandleActualWindow    (void) const
{
    SFUnrecTBWIN32WindowHelperPtr::GetHandlePtr returnValue(
        new  SFUnrecTBWIN32WindowHelperPtr::GetHandle(
             &_sfActualWindow,
             this->getType().getFieldDesc(ActualWindowFieldId),
             const_cast<TBWIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TBWIN32WindowBase::editHandleActualWindow   (void)
{
    SFUnrecTBWIN32WindowHelperPtr::EditHandlePtr returnValue(
        new  SFUnrecTBWIN32WindowHelperPtr::EditHandle(
             &_sfActualWindow,
             this->getType().getFieldDesc(ActualWindowFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TBWIN32Window::setActualWindow,
                    static_cast<TBWIN32Window *>(this), _1));

    editSField(ActualWindowFieldMask);

    return returnValue;
}

GetFieldHandlePtr TBWIN32WindowBase::getHandleHwnd            (void) const
{
    SFHWND::GetHandlePtr returnValue(
        new  SFHWND::GetHandle(
             &_sfHwnd,
             this->getType().getFieldDesc(HwndFieldId),
             const_cast<TBWIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TBWIN32WindowBase::editHandleHwnd           (void)
{
    SFHWND::EditHandlePtr returnValue(
        new  SFHWND::EditHandle(
             &_sfHwnd,
             this->getType().getFieldDesc(HwndFieldId),
             this));


    editSField(HwndFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TBWIN32WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TBWIN32Window *pThis = static_cast<TBWIN32Window *>(this);

    pThis->execSync(static_cast<TBWIN32Window *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TBWIN32WindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TBWIN32Window *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TBWIN32Window *>(pRefAspect),
                  dynamic_cast<const TBWIN32Window *>(this));

    return returnValue;
}
#endif

void TBWIN32WindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TBWIN32Window *>(this)->setActualWindow(NULL);


}


OSG_END_NAMESPACE
