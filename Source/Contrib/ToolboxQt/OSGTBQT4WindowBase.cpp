/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TBQT4Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGGLUTWindow.h"              // FuckEverything Class

#include "OSGTBQT4WindowBase.h"
#include "OSGTBQT4Window.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TBQT4Window
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLUTWindow *    TBQT4WindowBase::_sfFuckEverything
    
*/

/*! \var TBQGLWidgetP    TBQT4WindowBase::_sfTBQGLWidget
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TBQT4Window *, nsOSG>::_type(
    "TBQT4WindowPtr", 
    "WindowPtr", 
    TBQT4Window::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TBQT4Window *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TBQT4Window *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TBQT4Window *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TBQT4WindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFWeakGLUTWindowPtr::Description(
        SFWeakGLUTWindowPtr::getClassType(),
        "FuckEverything",
        "",
        FuckEverythingFieldId, FuckEverythingFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TBQT4Window::editHandleFuckEverything),
        static_cast<FieldGetMethodSig >(&TBQT4Window::getHandleFuckEverything));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTBQGLWidgetP::Description(
        SFTBQGLWidgetP::getClassType(),
        "TBQGLWidget",
        "",
        TBQGLWidgetFieldId, TBQGLWidgetFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TBQT4Window::editHandleTBQGLWidget),
        static_cast<FieldGetMethodSig >(&TBQT4Window::getHandleTBQGLWidget));

    oType.addInitialDesc(pDesc);
}


TBQT4WindowBase::TypeObject TBQT4WindowBase::_type(
    TBQT4WindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TBQT4WindowBase::createEmptyLocal),
    TBQT4Window::initMethod,
    TBQT4Window::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TBQT4Window::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TBQT4Window\"\n"
    "    parent=\"Window\"\n"
    "    library=\"ContribToolboxQt\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "\tisNodeCore=\"false\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"FuckEverything\"\n"
    "        type=\"GLUTWindow\"\n"
    "\t\tcategory=\"weakpointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "\t\tfieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "\t    name=\"TBQGLWidget\"\n"
    "\t    type=\"TBQGLWidgetP\"\n"
    "\t    cardinality=\"single\"\n"
    "\t    visibility=\"internal\"\n"
    "\t    defaultValue=\"NULL\"\n"
    "\t    fieldHeader=\"OSGTBQT4WindowDataFields.h\"\n"
    "\t    access=\"public\"\n"
    "\t\tfieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "    </Field>\t\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TBQT4WindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &TBQT4WindowBase::getType(void) const
{
    return _type;
}

UInt32 TBQT4WindowBase::getContainerSize(void) const
{
    return sizeof(TBQT4Window);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TBQT4Window::_sfFuckEverything field.
const SFWeakGLUTWindowPtr *TBQT4WindowBase::getSFFuckEverything(void) const
{
    return &_sfFuckEverything;
}

SFWeakGLUTWindowPtr *TBQT4WindowBase::editSFFuckEverything (void)
{
    editSField(FuckEverythingFieldMask);

    return &_sfFuckEverything;
}

SFTBQGLWidgetP *TBQT4WindowBase::editSFTBQGLWidget(void)
{
    editSField(TBQGLWidgetFieldMask);

    return &_sfTBQGLWidget;
}

const SFTBQGLWidgetP *TBQT4WindowBase::getSFTBQGLWidget(void) const
{
    return &_sfTBQGLWidget;
}






/*------------------------------ access -----------------------------------*/

SizeT TBQT4WindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FuckEverythingFieldMask & whichField))
    {
        returnValue += _sfFuckEverything.getBinSize();
    }
    if(FieldBits::NoField != (TBQGLWidgetFieldMask & whichField))
    {
        returnValue += _sfTBQGLWidget.getBinSize();
    }

    return returnValue;
}

void TBQT4WindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FuckEverythingFieldMask & whichField))
    {
        _sfFuckEverything.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TBQGLWidgetFieldMask & whichField))
    {
        _sfTBQGLWidget.copyToBin(pMem);
    }
}

void TBQT4WindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FuckEverythingFieldMask & whichField))
    {
        editSField(FuckEverythingFieldMask);
        _sfFuckEverything.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TBQGLWidgetFieldMask & whichField))
    {
        editSField(TBQGLWidgetFieldMask);
        _sfTBQGLWidget.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TBQT4WindowTransitPtr TBQT4WindowBase::createLocal(BitVector bFlags)
{
    TBQT4WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TBQT4Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TBQT4WindowTransitPtr TBQT4WindowBase::createDependent(BitVector bFlags)
{
    TBQT4WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TBQT4Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TBQT4WindowTransitPtr TBQT4WindowBase::create(void)
{
    TBQT4WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TBQT4Window>(tmpPtr);
    }

    return fc;
}

TBQT4Window *TBQT4WindowBase::createEmptyLocal(BitVector bFlags)
{
    TBQT4Window *returnValue;

    newPtr<TBQT4Window>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TBQT4Window *TBQT4WindowBase::createEmpty(void)
{
    TBQT4Window *returnValue;

    newPtr<TBQT4Window>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TBQT4WindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TBQT4Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TBQT4Window *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TBQT4WindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TBQT4Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TBQT4Window *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TBQT4WindowBase::shallowCopy(void) const
{
    TBQT4Window *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TBQT4Window *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TBQT4WindowBase::TBQT4WindowBase(void) :
    Inherited(),
    _sfFuckEverything         (NULL),
    _sfTBQGLWidget            (TBQGLWidgetP(NULL))
{
}

TBQT4WindowBase::TBQT4WindowBase(const TBQT4WindowBase &source) :
    Inherited(source),
    _sfFuckEverything         (NULL),
    _sfTBQGLWidget            (source._sfTBQGLWidget            )
{
}


/*-------------------------- destructors ----------------------------------*/

TBQT4WindowBase::~TBQT4WindowBase(void)
{
}

void TBQT4WindowBase::onCreate(const TBQT4Window *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TBQT4Window *pThis = static_cast<TBQT4Window *>(this);

        pThis->setFuckEverything(source->getFuckEverything());
    }
}

GetFieldHandlePtr TBQT4WindowBase::getHandleFuckEverything  (void) const
{
    SFWeakGLUTWindowPtr::GetHandlePtr returnValue(
        new  SFWeakGLUTWindowPtr::GetHandle(
             &_sfFuckEverything,
             this->getType().getFieldDesc(FuckEverythingFieldId),
             const_cast<TBQT4WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TBQT4WindowBase::editHandleFuckEverything (void)
{
    SFWeakGLUTWindowPtr::EditHandlePtr returnValue(
        new  SFWeakGLUTWindowPtr::EditHandle(
             &_sfFuckEverything,
             this->getType().getFieldDesc(FuckEverythingFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TBQT4Window::setFuckEverything,
                    static_cast<TBQT4Window *>(this), _1));

    editSField(FuckEverythingFieldMask);

    return returnValue;
}

GetFieldHandlePtr TBQT4WindowBase::getHandleTBQGLWidget     (void) const
{
    SFTBQGLWidgetP::GetHandlePtr returnValue(
        new  SFTBQGLWidgetP::GetHandle(
             &_sfTBQGLWidget,
             this->getType().getFieldDesc(TBQGLWidgetFieldId),
             const_cast<TBQT4WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TBQT4WindowBase::editHandleTBQGLWidget    (void)
{
    SFTBQGLWidgetP::EditHandlePtr returnValue(
        new  SFTBQGLWidgetP::EditHandle(
             &_sfTBQGLWidget,
             this->getType().getFieldDesc(TBQGLWidgetFieldId),
             this));


    editSField(TBQGLWidgetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TBQT4WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TBQT4Window *pThis = static_cast<TBQT4Window *>(this);

    pThis->execSync(static_cast<TBQT4Window *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TBQT4WindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TBQT4Window *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TBQT4Window *>(pRefAspect),
                  dynamic_cast<const TBQT4Window *>(this));

    return returnValue;
}
#endif

void TBQT4WindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TBQT4Window *>(this)->setFuckEverything(NULL);


}


OSG_END_NAMESPACE
