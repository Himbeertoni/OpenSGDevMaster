/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
@@if hasAuthors
@!AuthorsCommentText!@
@@else // hasAuthors
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
@@endif // hasAuthors
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@EventSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

@@AdditionalPriorityIncludes@@
#include <cstdlib>
#include <cstdio>

#include "@!HeaderPrefix!@OSGConfig.h"

@@AdditionalIncludes@@

#include "OSG@!nsFilePrefix!@@!Classname!@EventSourceBase.h"
#include "OSG@!nsFilePrefix!@@!Classname!@EventSource.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

@@if inExternalNamespace
@!LIBNAMESPACE!@_IMPORT_NAMESPACE;

@@endif
/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::@!Classname!@EventSource
    @!Description!@
 */



/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<@!Classname!@EventSource *, @!nsConst!@>::_type(
    "@!Classname!@EventSourcePtr",
@@if hasParentProducer
    "@!parentProducer!@EventSourcePtr",
@@else
@@if hasParentEventSource
    "@!parentEventSource!@Ptr",
@@else
    "EventContainerPtr",
@@endif
@@endif
    @!Classname!@EventSource::getClassType(),
    @!nsConst!@);
#endif

@@if PointerField
OSG_FIELDTRAITS_GETTYPE_NS(@!Classname!@EventSource *, @!nsConst!@)

    @@if SFPointerField
OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           @!Classname!@EventSource *,
                           @!nsConst!@);
    @@endif // SFPointerField

    @@if MFPointerField
OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           @!Classname!@EventSource *,
                           @!nsConst!@);
    @@endif // MFPointerField
@@else
OSG_FIELDTRAITS_GETTYPE_NS(@!Classname!@EventSource *, @!nsConst!@)
@@endif // PointerField
@@if ChildField

DataType &FieldTraits< @!Classname!@EventSource *, @!nsConst!@ + @!ChildNS!@ >::getType(void)
{
    return FieldTraits<@!Classname!@EventSource *, @!nsConst!@>::getType();
}

@@endif
@@if ChildSFields

OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      @!Classname!@EventSource *,
                      UnrecordedRefCountPolicy,
                      @!nsConst!@ + @!ChildNS!@);

@@endif
@@if ChildMFields

OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      @!Classname!@EventSource *,
                      UnrecordedRefCountPolicy,
                      @!nsConst!@ + @!ChildNS!@);

@@endif
@@if ParentField

DataType &FieldTraits<@!Classname!@EventSource *, @!nsConst!@ + @!ParentNS!@ >::getType(void)
{
    return FieldTraits<@!Classname!@EventSource *, @!nsConst!@>::getType();
}

@@endif
@@if ParentSFields

OSG_SFIELDTYPE_INST(ParentPointerSField,
                    @!Classname!@EventSource *,
                    NoRefCountPolicy,
                    @!nsConst!@ + @!ParentNS!@);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         @!Classname!@EventSource *,
                         NoRefCountPolicy,
                         @!nsConst!@ + @!ParentNS!@);

@@endif
@@if ParentMFields

OSG_MFIELDTYPE_INST(ParentPointerMField,
                    @!Classname!@EventSource *,
                    NoRefCountPolicy,
                    @!ParentNS!@);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerMField,
                         @!Classname!@EventSource *,
                         NoRefCountPolicy,
                         @!ParentNS!@);

@@endif
@@if inExternalNamespace

OSG_END_NAMESPACE
@@endif

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/
@@if inExternalNamespace

@!LIBNAMESPACE!@_BEGIN_NAMESPACE

OSG_IMPORT_NAMESPACE;
@@endif

void @!Classname!@EventSourceBase::classDescInserter(TypeObject &oType)
{
}


@!Classname!@EventSourceBase::TypeObject @!Classname!@EventSourceBase::_type(
    @!Classname!@EventSourceBase::getClassname(),
    Inherited::getClassname(),
    "@!Group!@",
    @!nsConst!@, //Namespace
    reinterpret_cast<PrototypeCreateF>(&@!Classname!@EventSourceBase::createEmptyLocal),
    @!Classname!@EventSource::initMethod,
    @!Classname!@EventSource::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&@!Classname!@EventSource::classDescInserter),
    @!TypeDescAddable!@,
    0,
    "",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &@!Classname!@EventSourceBase::getType(void)
{
@@if isDynFCDerived
    return _localType;
@@else
    return _type;
@@endif
}

const FieldContainerType &@!Classname!@EventSourceBase::getType(void) const
{
@@if isDynFCDerived
    return _localType;
@@else
    return _type;
@@endif
}

UInt32 @!Classname!@EventSourceBase::getContainerSize(void) const
{
    return sizeof(@!Classname!@EventSource);
}

@@if isDynFCDerived
@!Classname!@EventSourceBase::TypeObject &@!Classname!@EventSourceBase::getFinalType(void)
{
    return _type;
}

const @!Classname!@EventSourceBase::TypeObject &@!Classname!@EventSourceBase::getFinalType(void) const
{
    return _type;
}

@@endif


/*------------------------------ access -----------------------------------*/

SizeT @!Classname!@EventSourceBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    return returnValue;
}

void @!Classname!@EventSourceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);
}

void @!Classname!@EventSourceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);
}

//! create a new instance of the class
@!Classname!@EventSourceTransitPtr @!Classname!@EventSourceBase::createLocal(BitVector bFlags)
{
    @!Classname!@EventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<@!Classname!@EventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
@!Classname!@EventSourceTransitPtr @!Classname!@EventSourceBase::createDependent(BitVector bFlags)
{
    @!Classname!@EventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<@!Classname!@EventSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
@!Classname!@EventSourceTransitPtr @!Classname!@EventSourceBase::create(void)
{
    @!Classname!@EventSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<@!Classname!@EventSource>(tmpPtr);
    }

    return fc;
}

@!Classname!@EventSource *@!Classname!@EventSourceBase::createEmptyLocal(BitVector bFlags)
{
    @!Classname!@EventSource *returnValue;

    newPtr<@!Classname!@EventSource>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
@!Classname!@EventSource *@!Classname!@EventSourceBase::createEmpty(void)
{
    @!Classname!@EventSource *returnValue;

    newPtr<@!Classname!@EventSource>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr @!Classname!@EventSourceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    @!Classname!@EventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const @!Classname!@EventSource *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@EventSourceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    @!Classname!@EventSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const @!Classname!@EventSource *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@EventSourceBase::shallowCopy(void) const
{
    @!Classname!@EventSource *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const @!Classname!@EventSource *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

@!Classname!@EventSourceBase::@!Classname!@EventSourceBase(void) :
    Inherited()
{
}

@!Classname!@EventSourceBase::@!Classname!@EventSourceBase(const @!Classname!@EventSourceBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

@!Classname!@EventSourceBase::~@!Classname!@EventSourceBase(void)
{
}


#ifdef OSG_MT_CPTR_ASPECT
void @!Classname!@EventSourceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    @!Classname!@EventSource *pThis = static_cast<@!Classname!@EventSource *>(this);

    pThis->execSync(static_cast<@!Classname!@EventSource *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *@!Classname!@EventSourceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    @!Classname!@EventSource *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const @!Classname!@EventSource *>(pRefAspect),
                  dynamic_cast<const @!Classname!@EventSource *>(this));

    return returnValue;
}
#endif

void @!Classname!@EventSourceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

@@if hasValueMField
#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif
@@endif
}

@!LIBNAMESPACE!@_END_NAMESPACE
